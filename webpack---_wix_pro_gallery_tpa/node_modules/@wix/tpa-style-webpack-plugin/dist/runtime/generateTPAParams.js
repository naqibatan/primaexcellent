var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import { createStyleParamGetter, StyleParamType } from "@wix/tpa-settings";
import { pickBy } from "./utils/utils";
import { wixStylesFontUtils } from "./utils/wixStyleFontUtils";
import { wixStylesColorUtils } from "./utils/wixStylesColorUtils";
import { IS_RTL_PARAM } from "./constants";
var cloneStyleParams = function (styleParams) {
  return __assign(__assign({}, styleParams), {
    numbers: __assign({}, styleParams.numbers),
    booleans: __assign({}, styleParams.booleans),
    fonts: __assign({}, styleParams.fonts),
    colors: __assign({}, styleParams.colors),
  });
};
function overrideStyleParamsWithDefaults(styles, defaults, options) {
  var _a;
  var styleParams = cloneStyleParams(styles.styleParams);
  if (!defaults) {
    return styleParams;
  }
  var getParam = createStyleParamGetter({
    storage: styleParams,
    colors: styles.siteColors,
    textPresets: styles.siteTextPresets,
    isRTL: options.isRTL,
    isEditorX: options.isEditorX,
    dimensions: options.dimensions,
    isMobile: options.isMobile,
    styleParamsPerBreakpointMode: options.usesCssPerBreakpoint,
  });
  var styleParamsMap =
    ((_a = {}),
    (_a[StyleParamType.Number] = styleParams.numbers),
    (_a[StyleParamType.Boolean] = styleParams.booleans),
    (_a[StyleParamType.Font] = styleParams.fonts),
    (_a[StyleParamType.Color] = styleParams.colors),
    _a);
  Object.keys(defaults).forEach(function (styleKey) {
    var styleParam = defaults[styleKey];
    // tslint:disable-next-line:deprecation
    var keyWithoutTraits = styleParam.key || styleParam.name;
    var value = getParam(styleParam);
    if (typeof value !== "undefined" && keyWithoutTraits) {
      var targetStylesMap = styleParamsMap[styleParam.type];
      targetStylesMap[keyWithoutTraits] = value;
    }
  });
  return styleParams;
}
export function generateTPAParamsFromStyleParams(
  styleParams,
  siteColors,
  siteTextPresets,
  options
) {
  var _a;
  if (options === void 0) {
    options = {};
  }
  var colorStyles = styleParams.colors;
  var fontStyles = pickBy(
    styleParams.fonts,
    wixStylesFontUtils.isValidFontParam
  );
  var numbers = styleParams.numbers || {};
  var colors =
    wixStylesColorUtils.getFullColorStyles({
      colorStyles: colorStyles,
      siteColors: siteColors,
    }) || {};
  var fonts =
    wixStylesFontUtils.getFullFontStyles({
      fontStyles: fontStyles,
      siteTextPresets: siteTextPresets,
    }) || {};
  var strings = pickBy(styleParams.fonts, wixStylesFontUtils.isStringHack);
  var booleans = __assign(
    __assign({}, styleParams.booleans),
    ((_a = {}), (_a[IS_RTL_PARAM] = options.isRTL), _a)
  );
  return {
    colors: colors,
    fonts: fonts,
    numbers: numbers,
    strings: strings,
    booleans: booleans,
  };
}
export function generateTPAParams(
  siteColors,
  siteTextPresets,
  styleParams,
  options,
  defaults
) {
  var styleParamsWithDefaults = overrideStyleParamsWithDefaults(
    {
      styleParams: styleParams,
      siteColors: siteColors,
      siteTextPresets: siteTextPresets,
    },
    defaults,
    options
  );
  return generateTPAParamsFromStyleParams(
    styleParamsWithDefaults,
    siteColors,
    siteTextPresets,
    options
  );
}
//# sourceMappingURL=generateTPAParams.js.map
