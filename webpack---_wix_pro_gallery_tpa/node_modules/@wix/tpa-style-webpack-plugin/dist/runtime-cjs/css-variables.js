"use strict";
var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSiteCssVariables = exports.getComponentCssVariables = void 0;
var tpa_settings_1 = require("@wix/tpa-settings");
var generateTPAParams_1 = require("./generateTPAParams");
var processor_1 = require("./processor");
var cssFunctions_1 = require("./cssFunctions");
var common_1 = require("./common");
var wixStyleFontUtils_1 = require("./utils/wixStyleFontUtils");
var utils_1 = require("./utils/utils");
var prefixes = {
  siteColors: "wix",
  textPresets: "wix-font", // --wix-font-{name}
};
var isTextPreset = function (siteTextPresets, key) {
  return siteTextPresets[key];
};
var isFontWeight = function (key) {
  return ["LIGHT", "MEDIUM", "STRONG"].includes(key);
};
var isGlobalFont = function (siteTextPresets, key) {
  return isTextPreset(siteTextPresets, key) || isFontWeight(key);
};
var isGlobalColor = function (key) {
  return key.startsWith("color-");
};
var emitCssVariable = function (paramKey, paramValue, prefix) {
  if (prefix === void 0) {
    prefix = "";
  }
  var normalizedKey = paramKey.replace(/:/g, "-");
  var key = "--"
    .concat(prefix ? "".concat(prefix, "-") : "")
    .concat(normalizedKey);
  return {
    key: key,
    value: paramValue,
  };
};
var toStylesheet = function (definitions) {
  return Object.entries(definitions)
    .map(function (_a) {
      var key = _a[0],
        value = _a[1];
      return "".concat(key, ": ").concat(value, ";");
    })
    .join("\n");
};
function getComponentCssVariables(
  styles,
  customExpressions,
  cssVars,
  customOptions,
  defaults,
  customCssVars
) {
  var cssVariables = {};
  var options = __assign(
    __assign({}, common_1.defaultOptions),
    customOptions || {}
  );
  var tpaParams = (0, generateTPAParams_1.generateTPAParams)(
    styles.siteColors,
    styles.siteTextPresets,
    styles.styleParams,
    options,
    defaults
  );
  // globals
  cssVariables["--wix-direction"] = options.isRTL ? "rtl" : "ltr";
  // numbers
  Object.entries(tpaParams.numbers).forEach(function (_a) {
    var key = _a[0],
      value = _a[1];
    var cssVariable = emitCssVariable(
      key,
      cssFunctions_1.cssFunctions.number(value)
    );
    cssVariables[cssVariable.key] = cssVariable.value;
  });
  // strings
  Object.entries(tpaParams.strings).forEach(function (_a) {
    var key = _a[0],
      font = _a[1];
    var cssVariable = emitCssVariable(key, font.value);
    cssVariables[cssVariable.key] = cssVariable.value;
  });
  // colors
  var colorKeys = Object.keys(
    defaults !== null && defaults !== void 0 ? defaults : {}
  )
    .filter(function (key) {
      return defaults[key].type === tpa_settings_1.StyleParamType.Color;
    })
    .map(function (key) {
      return defaults[key].key || key;
    });
  Object.entries(tpaParams.colors)
    .filter(function (_a) {
      var key = _a[0];
      return styles.styleParams.colors[key] || colorKeys.includes(key);
    })
    .forEach(function (_a) {
      var key = _a[0],
        color = _a[1];
      try {
        var rgbParts = (0, cssFunctions_1.toRgbParts)(
          cssFunctions_1.cssFunctions.color(color, tpaParams)
        );
        var cssVariable = emitCssVariable(key, rgbParts.full);
        cssVariables[cssVariable.key] = cssVariable.value;
        cssVariables["".concat(cssVariable.key, "-rgb")] = rgbParts.rgb;
        cssVariables["".concat(cssVariable.key, "-opacity")] = rgbParts.opacity;
      } catch (e) {
        // swallow
      }
    });
  // fonts
  Object.entries(tpaParams.fonts)
    .filter(function (_a) {
      var key = _a[0];
      return !isGlobalFont(styles.siteTextPresets, key);
    })
    .forEach(function (_a) {
      var key = _a[0],
        font = _a[1];
      try {
        var cssVariable = emitCssVariable(
          key,
          cssFunctions_1.cssFunctions.font(font, tpaParams)
        );
        cssVariables[cssVariable.key] = cssVariable.value;
        cssVariables["".concat(cssVariable.key, "-style")] = font.style;
        cssVariables["".concat(cssVariable.key, "-variant")] = font.variant;
        cssVariables["".concat(cssVariable.key, "-weight")] = font.weight;
        cssVariables["".concat(cssVariable.key, "-size")] = (0,
        utils_1.withDefaultPxUnit)(font.size);
        cssVariables["".concat(cssVariable.key, "-line-height")] = (0,
        utils_1.withDefaultPxUnit)(font.lineHeight);
        cssVariables["".concat(cssVariable.key, "-family")] =
          wixStyleFontUtils_1.wixStylesFontUtils.stringifyFontFamily(
            font.family
          );
        cssVariables["".concat(cssVariable.key, "-text-decoration")] =
          font.underline ? "underline" : "none";
      } catch (e) {
        // swallow
      }
    });
  // custom expressions
  var processor = (0, processor_1.getProcessor)({
    cssVars: cssVars,
    plugins: common_1.plugins,
  });
  Object.entries(customExpressions).forEach(function (_a) {
    var key = _a[0],
      expression = _a[1];
    try {
      var value = processor.process({
        part: expression,
        tpaParams: tpaParams,
      });
      var cssVariable = emitCssVariable(key, value);
      cssVariables[cssVariable.key] = cssVariable.value;
    } catch (e) {
      // swallow
    }
  });
  if (typeof customCssVars === "function") {
    var customCssVarsValue = customCssVars({
      styleParams: tpaParams,
      isMobile: options.isMobile,
      isRTL: options.isRTL,
    });
    Object.entries(customCssVarsValue).forEach(function (_a) {
      var key = _a[0],
        value = _a[1];
      var cssVariable = emitCssVariable(key, String(value));
      cssVariables[cssVariable.key] = cssVariable.value;
    });
  }
  return {
    variables: cssVariables,
    stylesheet: toStylesheet(cssVariables),
  };
}
exports.getComponentCssVariables = getComponentCssVariables;
function getSiteCssVariables(siteColors, siteTextPresets) {
  var cssVariables = {};
  var emptyStyleParams = {
    booleans: {},
    colors: {},
    fonts: {},
    numbers: {},
    googleFontsCssUrl: "",
  };
  var tpaParams = (0, generateTPAParams_1.generateTPAParams)(
    siteColors,
    siteTextPresets,
    emptyStyleParams,
    common_1.defaultOptions,
    {}
  );
  // colors
  Object.entries(tpaParams.colors)
    .filter(function (_a) {
      var key = _a[0];
      return isGlobalColor(key);
    })
    .forEach(function (_a) {
      var key = _a[0],
        color = _a[1];
      var rgbParts = (0, cssFunctions_1.toRgbParts)(
        cssFunctions_1.cssFunctions.color(color, tpaParams)
      );
      var cssVariable = emitCssVariable(
        key,
        rgbParts.full,
        prefixes.siteColors
      );
      cssVariables[cssVariable.key] = cssVariable.value;
    });
  // fonts
  Object.entries(tpaParams.fonts)
    .filter(function (_a) {
      var key = _a[0];
      return isGlobalFont(siteTextPresets, key);
    })
    .forEach(function (_a) {
      var key = _a[0],
        font = _a[1];
      var cssVariable = emitCssVariable(
        key,
        cssFunctions_1.cssFunctions.font(font, tpaParams),
        prefixes.textPresets
      );
      cssVariables[cssVariable.key] = cssVariable.value;
      cssVariables["".concat(cssVariable.key, "-style")] = font.style;
      cssVariables["".concat(cssVariable.key, "-variant")] = font.variant;
      cssVariables["".concat(cssVariable.key, "-weight")] = font.weight;
      cssVariables["".concat(cssVariable.key, "-size")] = (0,
      utils_1.withDefaultPxUnit)(font.size);
      cssVariables["".concat(cssVariable.key, "-line-height")] = (0,
      utils_1.withDefaultPxUnit)(font.lineHeight);
      cssVariables["".concat(cssVariable.key, "-family")] =
        wixStyleFontUtils_1.wixStylesFontUtils.stringifyFontFamily(font.family);
      cssVariables["".concat(cssVariable.key, "-text-decoration")] =
        font.underline ? "underline" : "none";
    });
  return {
    variables: cssVariables,
    stylesheet: toStylesheet(cssVariables),
  };
}
exports.getSiteCssVariables = getSiteCssVariables;
//# sourceMappingURL=css-variables.js.map
