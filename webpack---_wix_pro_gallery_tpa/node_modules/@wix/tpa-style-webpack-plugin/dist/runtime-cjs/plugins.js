"use strict";
var __spreadArray =
  (this && this.__spreadArray) ||
  function (to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugins = void 0;
var utils_1 = require("./utils/utils");
var paramsRegex = /,(?![^(]*(?:\)|}))/g;
var Plugins = /** @class */ (function () {
  function Plugins() {
    this.resetPlugins();
  }
  Plugins.prototype.addCssFunction = function (funcName, func) {
    this.cssFunctions[funcName] = wrapWithValueProvider(func);
    this.updateRegex();
  };
  Plugins.prototype.addDeclarationReplacer = function (func) {
    this.declarationReplacers.push(func);
  };
  Plugins.prototype.resetPlugins = function () {
    this.cssFunctions = {};
    this.declarationReplacers = [];
    this.regex = undefined;
  };
  Plugins.prototype.isSupportedFunction = function (str) {
    return this.regex.test(str);
  };
  Plugins.prototype.getFunctionSignature = function (str) {
    var groups = this.regex.exec(str);
    if (groups) {
      return {
        funcName: groups[1],
        args: this.extractArguments(groups[2]),
      };
    }
    return null;
  };
  Plugins.prototype.extractArguments = function (argsString) {
    var result = argsString.split(paramsRegex).reduce(
      function (acc, currentPart) {
        acc.tmpParts = acc.tmpParts.concat(currentPart);
        var tmpStr = acc.tmpParts.join(",");
        if ((0, utils_1.parenthesisAreBalanced)(tmpStr)) {
          acc.args.push(tmpStr);
          acc.tmpParts.length = 0;
        }
        return acc;
      },
      { args: [], tmpParts: [] }
    );
    if (result.tmpParts.length > 0) {
      throw new Error(
        "'".concat(argsString, "' contains unbalanced parenthesis.")
      );
    }
    return result.args;
  };
  Plugins.prototype.updateRegex = function () {
    this.regex = new RegExp(
      "(".concat(Object.keys(this.cssFunctions).join("|"), ")\\((.*)\\)")
    );
  };
  return Plugins;
})();
exports.Plugins = Plugins;
function wrapWithValueProvider(fnToWrap) {
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return function (tpaParams) {
      return fnToWrap.apply(
        void 0,
        __spreadArray(
          __spreadArray(
            [],
            args.map(function (fn) {
              return fn(tpaParams);
            }),
            false
          ),
          [tpaParams],
          false
        )
      );
    };
  };
}
//# sourceMappingURL=plugins.js.map
