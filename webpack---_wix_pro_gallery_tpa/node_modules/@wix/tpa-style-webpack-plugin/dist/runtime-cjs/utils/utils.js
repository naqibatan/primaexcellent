"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withDefaultPxUnit =
  exports.parenthesisAreBalanced =
  exports.escapeHtml =
  exports.pickBy =
  exports.reduceObj =
  exports.forEach =
  exports.isNumber =
  exports.parseJson =
  exports.isJsonLike =
  exports.isCssVar =
    void 0;
function isCssVar(key) {
  return key.indexOf("--") === 0;
}
exports.isCssVar = isCssVar;
function isJsonLike(value) {
  return (
    typeof value === "string" && value[0] === "{" && value.slice(-1) === "}"
  );
}
exports.isJsonLike = isJsonLike;
function parseJson(strValue) {
  return strValue
    .slice(1, -1)
    .split(",")
    .reduce(function (json, current) {
      var _a = current.split(":"),
        key = _a[0],
        value = _a[1];
      json[key.trim()] = value.trim().replace(/^["|'](.*)["|']$/, "$1");
      return json;
    }, {});
}
exports.parseJson = parseJson;
function isNumber(value) {
  return typeof value === "number";
}
exports.isNumber = isNumber;
function forEach(obj, iteratee) {
  Object.keys(obj).forEach(function (key) {
    return iteratee(obj[key], key);
  });
}
exports.forEach = forEach;
function reduceObj(obj, iteratee) {
  return Object.keys(obj).reduce(function (acc, key, index) {
    return iteratee(acc, { key: key, value: obj[key] }, index);
  }, {});
}
exports.reduceObj = reduceObj;
function pickBy(obj, predicate) {
  return Object.keys(obj || {}).reduce(function (result, key) {
    if (predicate(obj[key])) {
      result[key] = obj[key];
    }
    return result;
  }, {});
}
exports.pickBy = pickBy;
function escapeHtml(str) {
  return str && str.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
exports.escapeHtml = escapeHtml;
function parenthesisAreBalanced(str) {
  var parentheses = "(){}";
  var stack = [];
  var character;
  for (var i = 0; (character = str[i]); i++) {
    var bracePosition = parentheses.indexOf(character);
    if (bracePosition === -1) {
      continue;
    }
    if (bracePosition % 2 === 0) {
      stack.push(bracePosition + 1); // push next expected brace position
    } else if (stack.length === 0 || stack.pop() !== bracePosition) {
      return false;
    }
  }
  return stack.length === 0;
}
exports.parenthesisAreBalanced = parenthesisAreBalanced;
function withDefaultPxUnit(value) {
  return typeof value === "number" ? "".concat(value, "px") : value;
}
exports.withDefaultPxUnit = withDefaultPxUnit;
//# sourceMappingURL=utils.js.map
