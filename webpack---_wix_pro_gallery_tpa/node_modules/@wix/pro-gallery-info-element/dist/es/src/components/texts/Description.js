import { __extends } from "tslib";
import React from "react";
import { getFinalStyle } from "../sharedBetweenInfoComponents";
var Description = /** @class */ (function (_super) {
  __extends(Description, _super);
  function Description() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  Description.prototype.render = function () {
    var description = this.props.description;
    // TODO: Line height fixer changes the styles of the span directly on the DOM node. Since I don't have a awy to reset it everytime the fixer runs, I actually remove the entire DOM node. This should be handled in a better way
    var RANDOM_KEY_THAT_CAUSES_PERFORMANCE_PROBLEM = this.props
      .isNewInfoElements
      ? Math.random()
      : "CONST";
    return React.createElement(
      "div",
      {
        key: RANDOM_KEY_THAT_CAUSES_PERFORMANCE_PROBLEM,
        className: "info-member info-element-description",
        "data-hook": "item-description",
        style: getFinalStyle(this.props),
      },
      description.split("\n").map(function (i, key) {
        return React.createElement(
          "span",
          { key: key },
          i,
          React.createElement("br", null)
        );
      })
    );
  };
  return Description;
})(React.Component);
export default Description;
//# sourceMappingURL=Description.js.map
