import { __assign } from "tslib";
export default getCustomComponents;
// @ts-ignore
import React from "react";
import {
  // @ts-ignore
  GALLERY_v4_CONSTS,
  // @ts-ignore
} from "@wix/photography-client-lib";
// @ts-ignore
import InfoElement from "../InfoElement";
import EXTERNAL_INFO_TYPE from "../../common/constants/externalInfoType";
import renderMasterInfoElements from "./renderMasterInfoElements";
function getCustomComponents(
  shouldUseNewInfo,
  galleryWrapperProps,
  shouldControlHorizontalAlignment,
  shouldUseLineHeightFixer,
  shouldInsertDefaults,
  customInfoRenderer,
  customHoverRenderer,
  partialMasterInfo
) {
  // const simulatedProps = {infoElementsOptions: }
  if (shouldUseNewInfo) {
    ["top", "middle", "bottom"].forEach(function (sectionName) {
      // @ts-ignore
      partialMasterInfo.external.order[sectionName] =
        partialMasterInfo.external.order[sectionName].split(",");
      // @ts-ignore
      partialMasterInfo.internal.order[sectionName] =
        partialMasterInfo.internal.order[sectionName].split(",");
    });
    // @ts-ignore
    galleryWrapperProps.infoElementsOptions = {
      newInfoElementsConfig: {
        // @ts-ignore
        internal: partialMasterInfo.internal,
        // @ts-ignore
        external: partialMasterInfo.external,
        externalPlacement: "external",
      },
    };
  }
  return {
    customInfoRenderer: function (pgItemProps, _placement) {
      if (shouldUseNewInfo) {
        return renderMasterInfoElements(
          getInternalOrExternal(_placement),
          {},
          galleryWrapperProps,
          true,
          pgItemProps,
          shouldControlHorizontalAlignment,
          shouldUseLineHeightFixer,
          shouldInsertDefaults
        );
      }
      return (
        customInfoRenderer ||
        React.createElement(
          InfoElement,
          __assign({ infoType: EXTERNAL_INFO_TYPE.EXTERNAL }, pgItemProps)
        )
      );
    },
    customHoverRenderer: function (pgItemProps) {
      if (shouldUseNewInfo) {
        return renderMasterInfoElements(
          EXTERNAL_INFO_TYPE.HOVER,
          {},
          galleryWrapperProps,
          true,
          pgItemProps,
          shouldControlHorizontalAlignment,
          shouldUseLineHeightFixer,
          shouldInsertDefaults
        );
      }
      return (
        customHoverRenderer ||
        React.createElement(
          InfoElement,
          __assign({ infoType: EXTERNAL_INFO_TYPE.HOVER }, pgItemProps)
        )
      );
    },
  };
}
function getInternalOrExternal(_placement) {
  // @ts-ignore
  return _placement === GALLERY_v4_CONSTS.placements.SHOW_ON_HOVER
    ? EXTERNAL_INFO_TYPE.HOVER
    : EXTERNAL_INFO_TYPE.EXTERNAL;
}
//# sourceMappingURL=getCustomComponents.js.map
