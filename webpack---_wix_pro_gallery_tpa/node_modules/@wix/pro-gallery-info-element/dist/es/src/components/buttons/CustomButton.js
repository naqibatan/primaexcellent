import { __extends } from "tslib";
import React from "react";
import INFO_EVENTS from "../../common/constants/infoEvents";
import CustomButtonIcon from "./CustomButtonIcon";
import { utils } from "../../common/utils/utils";
import { getFinalStyle } from "../sharedBetweenInfoComponents";
var CustomButton = /** @class */ (function (_super) {
  __extends(CustomButton, _super);
  function CustomButton() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  CustomButton.prototype.render = function () {
    var _this = this;
    var _a = this.props,
      options = _a.options,
      actions = _a.actions;
    var buttonText = options.customButtonText || "Click here";
    // Flip alignment sides when RTL
    var justifyContent = this.props.isNewInfoElements
      ? this.props.horizontalAlignment
      : options.galleryHorizontalAlign;
    if (options.isRTL) {
      justifyContent = utils.flipGalleryHorizontalAlign(
        options.galleryHorizontalAlign
      );
    }
    var style = {
      justifyContent: justifyContent,
      zIndex: 17,
    };
    if (this.props.isNewInfoElements) {
      style.paddingTop = this.props.paddingTop;
      style.paddingBottom = this.props.paddingBottom;
      style.paddingLeft = this.props.paddingLeft;
      style.paddingRight = this.props.paddingRight;
    }
    return React.createElement(
      "div",
      {
        className: "info-member info-element-custom-button-wrapper",
        "data-hook": "custom-button-wrapper",
        style: style,
      },
      this.props.small && options.isStoreGallery
        ? React.createElement(CustomButtonIcon, null)
        : React.createElement(
            "button",
            {
              "data-hook": "custom-button-button",
              className: "info-element-custom-button-button",
              onClick: function () {
                return actions.eventsListener(
                  INFO_EVENTS.CUSTOM_BUTTON_CLICKED,
                  _this.props
                );
              },
              style: { cursor: "inherit" },
              tabIndex: -1,
            },
            buttonText,
            React.createElement("div", { className: "overlay" })
          )
    );
  };
  return CustomButton;
})(React.Component);
export default CustomButton;
//# sourceMappingURL=CustomButton.js.map
