import { __extends } from "tslib";
import React from "react";
import { getFinalStyle } from "../sharedBetweenInfoComponents";
var Title = /** @class */ (function (_super) {
  __extends(Title, _super);
  function Title() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  Title.prototype.render = function () {
    var title = this.props.title;
    var finalStyle = getFinalStyle(this.props);
    if (this.props.isNewInfoElements) {
      finalStyle.marginBottom = finalStyle.paddingBottom;
      delete finalStyle.paddingBottom;
    }
    // TODO: Line height fixer changes the styles of the span directly on the DOM node. Since I don't have a awy to reset it everytime the fixer runs, I actually remove the entire DOM node. This should be handled in a better way
    var RANDOM_KEY_THAT_CAUSES_PERFORMANCE_PROBLEM = this.props
      .isNewInfoElements
      ? Math.random()
      : "CONST";
    return React.createElement(
      "div",
      {
        key: RANDOM_KEY_THAT_CAUSES_PERFORMANCE_PROBLEM,
        className: "info-member info-element-title",
        "data-hook": "item-title",
        style: finalStyle,
      },
      React.createElement("span", null, title)
    );
  };
  return Title;
})(React.Component);
export default Title;
//# sourceMappingURL=Title.js.map
