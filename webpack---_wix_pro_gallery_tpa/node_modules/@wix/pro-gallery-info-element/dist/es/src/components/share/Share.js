import { __extends } from "tslib";
import React from "react";
import { GALLERY_v4_CONSTS } from "@wix/photography-client-lib";
import INFO_EVENTS from "../../common/constants/infoEvents";
import { window } from "@wix/photography-client-lib";
import { utils } from "../../common/utils/utils";
import FacebookIcon from "../svgs/components/facebook";
import PinterestIcon from "../svgs/components/pinterest";
import TwitterIcon from "../svgs/components/twitter";
import EmailIcon from "../svgs/components/email";
import TumblrIcon from "../svgs/components/tumblr";
var Share = /** @class */ (function (_super) {
  __extends(Share, _super);
  function Share(props) {
    var _this = _super.call(this, props) || this;
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.getShareArr = _this.getShareArr.bind(_this);
    _this.buttons = [];
    _this.shareArr = _this.getShareArr(_this.props.type);
    _this.state = {
      showShare: false,
      focusedShareIcon: 0,
    };
    return _this;
  }
  Share.prototype.getShareArr = function (type) {
    return type === "text"
      ? ["facebook", "twitter", "tumblr", "email"]
      : ["facebook", "twitter", "pinterest", "tumblr", "email"];
  };
  Share.prototype.handleKeyDown = function (e, type) {
    if (this.state.showShare) {
      switch (e.keyCode || e.charCode) {
        case 38: // up
        case 37: // left
        case 33: // page up
          e.preventDefault();
          e.stopPropagation();
          utils.setStateAndLog(this, "Share Keypress", {
            focusedShareIcon: Math.max(1, this.state.focusedShareIcon - 1),
          });
          return false;
        case 39: // right
        case 40: // down
        case 34: // page down
          e.preventDefault();
          e.stopPropagation();
          utils.setStateAndLog(this, "Share Keypress", {
            focusedShareIcon: Math.min(
              type === "text" ? 4 : 5,
              this.state.focusedShareIcon + 1
            ),
          });
          return false;
        case 9: // tab
        case 27: // esc
          e.preventDefault();
          e.stopPropagation();
          this.props.actions.toggleShare(e, false);
          utils.setStateAndLog(this, "Share Keypress", {
            showShare: false,
            focusedShareIcon: 0,
          });
          return false;
        default:
          break;
      }
    }
    switch (e.keyCode || e.charCode) {
      case 32: // space
      case 13: // enter
        e.preventDefault();
        e.stopPropagation();
        if (this.state.showShare) {
          var shareData = {
            network: this.shareArr[this.state.focusedShareIcon - 1],
            shareProps: this.props,
          };
          this.props.actions.eventsListener(
            INFO_EVENTS.SHARE_BUTTON_CLICKED,
            shareData
          );
          this.props.actions.toggleShare(e, false);
          utils.setStateAndLog(this, "Share Keypress", {
            showShare: false,
            focusedShareIcon: 0,
          });
        } else {
          this.props.actions.toggleShare(e, true);
          utils.setStateAndLog(this, "Share Keypress", {
            showShare: true,
            focusedShareIcon: 1,
          });
        }
        return false;
      default:
        break;
    }
    return true;
  };
  Share.prototype.componentDidUpdate = function () {
    if (this.props.showShare && !this.state.showShare) {
      utils.setStateAndLog(this, "props.showShare is true", {
        showShare: true,
      });
    } else if (!this.props.showShare && this.state.showShare) {
      utils.setStateAndLog(this, "props.showShare is false", {
        showShare: false,
      });
    }
    try {
      if (
        (this.props.viewMode === GALLERY_v4_CONSTS.viewMode.SITE ||
          this.props.viewMode === GALLERY_v4_CONSTS.viewMode.SEO) &&
        !this.props.isMobile &&
        window.document &&
        window.document.activeElement &&
        window.document.activeElement.className
      ) {
        var activeElement_1 = window.document.activeElement;
        var isShareItemInFocus = function () {
          return String(activeElement_1.className).indexOf("network-") >= 0;
        };
        if (!this.state.showShare && isShareItemInFocus()) {
          this.socialShareBox.focus();
          return;
        }
      }
      var focusedButton = this.state.focusedShareIcon;
      if (focusedButton > 0) {
        this.buttons[focusedButton - 1].focus();
      }
    } catch (e) {
      console.warn("Cannot focus on share icon", this.props.focus, e);
    }
  };
  Share.prototype.getShareSvg = function (network) {
    switch (network.toLowerCase()) {
      case GALLERY_v4_CONSTS.socialNetworks.FACEBOOK:
        return FacebookIcon;
      case GALLERY_v4_CONSTS.socialNetworks.TWITTER:
        return TwitterIcon;
      case GALLERY_v4_CONSTS.socialNetworks.PINTEREST:
        return PinterestIcon;
      case GALLERY_v4_CONSTS.socialNetworks.EMAIL:
        return EmailIcon;
      default:
      case GALLERY_v4_CONSTS.socialNetworks.TUMBLR:
        return TumblrIcon;
    }
  };
  Share.prototype.getShareItem = function (network, idx) {
    var _this = this;
    var shareIconsNumber = this.shareArr.length;
    var ShareIcon = this.getShareSvg(network);
    return React.createElement(
      "button",
      {
        className:
          "has-custom-focus network-".concat(idx + 1) +
          (this.props.viewMode === GALLERY_v4_CONSTS.viewMode.SITE ||
          this.props.viewMode === GALLERY_v4_CONSTS.viewMode.SEO
            ? ""
            : " inactive "),
        style: {
          top: this.props.isVerticalContainer
            ? "calc(100% / 6 * "
                .concat(idx + 1, " + -10px ")
                .concat(shareIconsNumber === 4 ? "+ 100% / 12" : "", ")")
            : "",
          left: this.props.isVerticalContainer
            ? ""
            : "calc(100% / 6 * "
                .concat(idx + 1, " + -10px ")
                .concat(shareIconsNumber === 4 ? "+ 100% / 12" : "", ")"),
        },
        onClick: function (e) {
          e.preventDefault();
          e.stopPropagation();
          var shareData = {
            network: network,
            shareProps: _this.props,
          };
          _this.props.actions.eventsListener(
            INFO_EVENTS.SHARE_BUTTON_CLICKED,
            shareData
          );
        },
        "data-hook": network + "-share-button",
        ref: function (button) {
          return (_this.buttons[idx] = button);
        },
        title: "Share on ".concat(network),
        "aria-live": "assertive",
        role: "menuitem",
        tabIndex: -1,
        key: network + "-share-icon",
      },
      React.createElement(ShareIcon, { size: "18" })
    );
  };
  Share.prototype.render = function () {
    var _this = this;
    var _a = this.props,
      options = _a.options,
      id = _a.id,
      isVerticalContainer = _a.isVerticalContainer,
      actions = _a.actions,
      style = _a.style,
      type = _a.type;
    if (options.allowSocial) {
      var minDimension = 200;
      return React.createElement(
        "div",
        {
          "data-hook": "social-share-box",
          className:
            "info-member info-element-social-share-box " +
            (this.props.showShare ? " opened " : " hidden ") +
            (this.state.showShare ? " hovered " : "") +
            (isVerticalContainer ? " vertical-item " : ""),
          ref: function (e) {
            return (_this.socialShareBox = e);
          },
          onClick: function (e) {
            return actions.toggleShare(e, false);
          },
          onMouseOut: function (e) {
            return actions.toggleShare(e, false);
          },
          style: {
            transform: isVerticalContainer
              ? "translateY(-50%) " +
                (style.height > minDimension
                  ? ""
                  : "scale(" + style.height / minDimension + ")")
              : "translateX(-50%) " +
                (style.width > minDimension
                  ? ""
                  : "scale(" + style.width / minDimension + ")"),
          },
          tabIndex:
            GALLERY_v4_CONSTS.isLayout("SLIDESHOW")(options) &&
            this.props.activeIndex === this.props.idx
              ? 0
              : -1,
          onKeyDown: function (e) {
            return _this.handleKeyDown(e, type);
          },
          "aria-label": "Share",
          role: "menu",
          key: "item-social-share-container-" + id,
        },
        this.shareArr.map(function (network, i) {
          return _this.getShareItem(network, i);
        })
      );
    }
    return false;
  };
  return Share;
})(React.Component);
export default Share;
//# sourceMappingURL=Share.js.map
