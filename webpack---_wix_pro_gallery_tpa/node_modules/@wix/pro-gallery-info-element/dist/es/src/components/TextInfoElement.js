import { __assign, __extends } from "tslib";
import React from "react";
import Texts from "./texts/Texts";
import { GALLERY_v4_CONSTS } from "@wix/photography-client-lib";
import { isNarrow, isSmallItem } from "@wix/photography-client-lib";
var TextInfoElement = /** @class */ (function (_super) {
  __extends(TextInfoElement, _super);
  function TextInfoElement(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      showShare: false,
    };
    _this.isSmallItem = _this.isSmallItem.bind(_this);
    _this.isNarrow = _this.isNarrow.bind(_this);
    _this.hasRequiredMediaUrl = _this.hasRequiredMediaUrl.bind(_this);
    _this.getItemTextsDetails = _this.getItemTextsDetails.bind(_this);
    _this.createTextInfoElement = _this.createTextInfoElement.bind(_this);
    return _this;
  }
  TextInfoElement.prototype.isSmallItem = function () {
    return isSmallItem(this.props);
  };
  TextInfoElement.prototype.isNarrow = function () {
    return isNarrow(this.props);
  };
  TextInfoElement.prototype.hasRequiredMediaUrl = function () {
    var _a = this.props,
      type = _a.type,
      url = _a.url;
    // if (there is an url for video items and image items) OR text item (text item do not use media url)
    return url || type === "text";
  };
  TextInfoElement.prototype.getItemTextsDetails = function (
    externalTotalInfoHeight
  ) {
    if (externalTotalInfoHeight === void 0) {
      externalTotalInfoHeight = 0;
    }
    var isImage = this.props.type === "image" || this.props.type === "picture";
    var useCustomButton = this.props.options.useCustomButton === true;
    var shouldShowButton =
      (isImage || !this.props.options.isStoreGallery) && useCustomButton;
    return React.createElement(
      Texts,
      __assign({}, this.props, {
        key: "item-texts-".concat(this.props.id),
        infoContainer: this.infoContainer,
        showShare: this.state.showShare,
        isSmallItem: this.isSmallItem(),
        isNarrow: this.isNarrow(),
        shouldShowButton: shouldShowButton,
        externalTotalInfoHeight: externalTotalInfoHeight,
        actions: {
          eventsListener: this.props.eventsListener,
        },
      })
    );
  };
  TextInfoElement.prototype.createTextInfoElement = function () {
    var _a = this.props,
      options = _a.options,
      style = _a.style;
    // if there is no url for videos and images, we will not render the itemWrapper
    // but will render the info element if exists, with the whole size of the item
    var infoHeight =
      options.textBoxHeight + (this.hasRequiredMediaUrl() ? 0 : style.height);
    var itemTexts = this.getItemTextsDetails(infoHeight);
    return React.createElement(
      "div",
      { "data-hook": "external-info-element", style: { height: "100%" } },
      itemTexts
    );
  };
  TextInfoElement.prototype.render = function () {
    var _this = this;
    var infoElement = this.createTextInfoElement();
    return React.createElement(
      "div",
      {
        "data-hook": "info-element",
        ref: function (e) {
          return (_this.infoContainer = e);
        },
        style: { height: "100%", width: "100%" },
      },
      infoElement
    );
  };
  return TextInfoElement;
})(React.Component);
export default TextInfoElement;
//# sourceMappingURL=TextInfoElement.js.map
