import _ from "lodash";
import EXTERNAL_INFO_TYPE from "../../common/constants/externalInfoType";
import renderWixInfoComponents from "./renderWixInfoComponents";
import addItemPropsToMasterInfo from "./addItemPropsToMasterInfo";
// @ts-ignore
import {
  getMasterInfo,
  addNewInfoElementsConfig,
} from "@wix/photography-client-lib";
// @ts-ignore
function getMigrated(galleryWrapperProps, internalOrExternal, pgItemProps) {
  var mock = getMasterInfo(internalOrExternal);
  // @ts-ignore
  // const master = galleryWrapperProps.infoElementsOptions.newInfoElementsConfig[internalOrExternal]
  // @ts-ignore
  var res = addNewInfoElementsConfig(
    _.cloneDeep(pgItemProps.options),
    _.cloneDeep(mock.enabled),
    _.cloneDeep(mock.order)
  );
  return res.newInfoElementsConfig[internalOrExternal];
}
export default function renderMasterInfoElements(
  type,
  query,
  galleryWrapperProps,
  shouldUseNewSocialSharePopup,
  pgItemProps,
  shouldControlHorizontalAlignment,
  shouldUseLineHeightFixer,
  shouldInsertDefaults
) {
  var internalOrExternal = getInternalOrExternal(type);
  if (shouldInsertDefaults) {
    // @ts-ignore
    var orderAndEnabledFromUser = _.pick(
      galleryWrapperProps.infoElementsOptions.newInfoElementsConfig[
        internalOrExternal
      ],
      ["order", "enabled"]
    );
    // const internalMock = getMasterInfo('internal')
    // const externalMock = getMasterInfo('external')
    // @ts-ignore
    var migrated = getMigrated(
      galleryWrapperProps,
      internalOrExternal,
      pgItemProps
    );
    migrated.order = orderAndEnabledFromUser.order;
    migrated.enabled = orderAndEnabledFromUser.enabled;
    // @ts-ignore
    // galleryWrapperProps.infoElementsOptions.newInfoElementsConfig.external = _.merge({}, externalMock, getMigrated(galleryWrapperProps, 'external', pgItemProps));
    galleryWrapperProps.infoElementsOptions.newInfoElementsConfig[
      internalOrExternal
    ] = migrated;
    // @ts-ignore
    // galleryWrapperProps.infoElementsOptions.newInfoElementsConfig.internal = _.merge({}, internalMock, getMigrated(galleryWrapperProps, 'internal', pgItemProps))
  }
  // @ts-ignore
  var masterInfoProps = addItemPropsToMasterInfo(
    pgItemProps,
    galleryWrapperProps,
    shouldUseNewSocialSharePopup,
    internalOrExternal,
    new Map(Object.entries(query))
  );
  // @ts-ignore
  return renderWixInfoComponents(
    masterInfoProps,
    shouldControlHorizontalAlignment,
    shouldUseLineHeightFixer
  );
}
function getInternalOrExternal(type) {
  var HOVER = EXTERNAL_INFO_TYPE.HOVER,
    EXTERNAL = EXTERNAL_INFO_TYPE.EXTERNAL,
    SLIDESHOW = EXTERNAL_INFO_TYPE.SLIDESHOW;
  if (type === EXTERNAL || type === SLIDESHOW) {
    return "external";
  }
  if (type === HOVER) {
    return "internal";
  }
  throw new Error(
    "MasterInfoElement does not support the externalInfoType: ".concat(type)
  );
}
//# sourceMappingURL=renderMasterInfoElements.js.map
