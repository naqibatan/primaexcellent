import { __assign } from "tslib";
import _ from "lodash";
import {
  isNarrow,
  isSmallItem,
  isShort,
  isVerticalContainer,
  getConfigFromQueryParams,
} from "@wix/photography-client-lib";
function applyOldProduct(mas, pgItemProps) {
  if (
    isNarrow({ style: pgItemProps.style }) &&
    mas.enabled.Social &&
    mas.masterType === "internal"
  ) {
    var masterNewPaddingBottom = 0.1 * pgItemProps.style.height;
    mas.paddingBottom -= 26; // TODO Const from lib
    mas.socialParams.paddingBottom += masterNewPaddingBottom;
    mas.titleParams.paddingLeft = 5;
    mas.titleParams.paddingRight = 5;
  }
  if (isShort({ style: pgItemProps.style }) && mas.masterType === "internal") {
    mas.paddingBottom = 0;
    mas.paddingTop = 0;
    mas.socialParams.paddingBottom = pgItemProps.style.height * 0.1;
    // mas.height = 90% // TODO How do I handle this
  }
}
// TODO: This method should be injected from native and tpa.
// native: getItemMetadata: x => x
// tpa: getItemMetadata: x => x.metaData
function getItemMetadata(items, pgItemProps) {
  var ob = items[pgItemProps.idx];
  // @ts-ignore
  if (ob.metaData) {
    // @ts-ignore
    return ob.metaData;
  }
  return ob;
}
export default function addItemPropsToMasterInfo(
  pgItemProps,
  galleryWrapperProps,
  shouldUseNewSocialSharePopup,
  internalOrExternal,
  queryParams
) {
  var masterConfigForItem = _.cloneDeep(
    galleryWrapperProps.infoElementsOptions.newInfoElementsConfig[
      internalOrExternal
    ]
  );
  var isMigratedFromOldInfo = _.has(
    galleryWrapperProps,
    "infoElementsOptions.newInfoElementsConfig"
  );
  if (isMigratedFromOldInfo) {
    applyOldProduct(masterConfigForItem, pgItemProps);
  }
  var items = galleryWrapperProps.items || [];
  var itemMetadata = getItemMetadata(items, pgItemProps);
  masterConfigForItem.titleParams.title = itemMetadata.title;
  if (!masterConfigForItem.titleParams.title) {
    masterConfigForItem.enabled.Title = false;
  }
  masterConfigForItem.descriptionParams.description = _.get(
    itemMetadata,
    "description",
    ""
  ); // description.split in component.
  if (!masterConfigForItem.descriptionParams.description) {
    masterConfigForItem.enabled.Description = false;
    masterConfigForItem.titleParams.paddingBottom -=
      pgItemProps.options.titleDescriptionSpace;
  }
  masterConfigForItem.customButtonParams.options = {
    customButtonText: pgItemProps.options.customButtonText,
  };
  var otherPropsForSocialParams = {
    shouldUseNewSocialSharePopup: shouldUseNewSocialSharePopup,
    isNarrow: isNarrow({ style: pgItemProps.style }),
    isSmallItem: isSmallItem({
      style: pgItemProps.style,
      options: _.pick(pgItemProps.options, [
        "cubeImages",
        "cubeType",
        "galleryLayout",
      ]),
    }),
    isShort: isShort({ style: pgItemProps.style }),
    isVerticalContainer: isVerticalContainer({ style: pgItemProps.style }),
    photoId: pgItemProps.photoId,
    isDemo: pgItemProps.isDemo,
    id: pgItemProps.id,
    // shouldUseNewSocialSharePopup always true ==> state.showShare in infoElement always true =>
    // state.showShare can never be turned to true => showShare always false
    showShare: false,
    createUrl: pgItemProps.createUrl,
  };
  masterConfigForItem.socialParams = __assign(
    __assign({}, masterConfigForItem.socialParams),
    otherPropsForSocialParams
  );
  // masterConfigForItem.galleryLayout = galleryWrapperProps.options.galleryLayout
  overrideConfigFromQueryParamsForDebuggingPurposes(
    masterConfigForItem,
    internalOrExternal,
    queryParams
  );
  return masterConfigForItem;
}
// allows debugging the master info with no panel implementaion:
// https://nirna3.wixsite.com/site-with-info-info/full-regular-info?petri_ovr=specs.pro-gallery.masterInfoElements%3Atrue%3Bspecs.ExcludeSiteFromSsr%3Atrue&pro-gallery-santa-wrapper-override=https%253A%252F%252Flocalhost%253A3200%252F&externalAlignments=title:left_description:right_customButton:left_social:left&externalSections=Description:top_Title:middle_CustomButton:top_Social:top&overrideConfig=true&internalAlignments=title:right_description:right_customButton:left_social:left&internalSections=Description:top_Title:top_CustomButton:top_Social:top
function overrideConfigFromQueryParamsForDebuggingPurposes(
  master,
  internalOrExternal,
  queryParams
) {
  var shouldEnable = queryParams.get("overrideConfig") === "true";
  if (!shouldEnable) {
    return;
  }
  // resetting all order
  master.order.top = [];
  master.order.middle = [];
  master.order.bottom = [];
  var fieldsToAlignments = getConfigFromQueryParams(
    queryParams,
    "".concat(internalOrExternal, "Alignments")
  );
  for (
    var _i = 0, _a = Object.entries(fieldsToAlignments);
    _i < _a.length;
    _i++
  ) {
    var _b = _a[_i],
      key = _b[0],
      value = _b[1];
    // @ts-ignore
    master["".concat(key, "Params")].horizontalAlignment = value;
  }
  var fieldsToSections = getConfigFromQueryParams(
    queryParams,
    "".concat(internalOrExternal, "Sections")
  );
  for (
    var _c = 0, _d = Object.entries(fieldsToSections);
    _c < _d.length;
    _c++
  ) {
    var _e = _d[_c],
      field = _e[0],
      section = _e[1];
    // @ts-ignore
    master.order[section].push(field);
    // @ts-ignore
    master.enabled[field] = true;
  }
}
//# sourceMappingURL=addItemPropsToMasterInfo.js.map
