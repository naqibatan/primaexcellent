import { __assign, __extends } from "tslib";
import React from "react";
import {
  GALLERY_v4_CONSTS,
  isShort,
  isVerticalContainer,
} from "@wix/photography-client-lib";
import Social from "./social/Social";
import Share from "./share/Share";
import EXTERNAL_INFO_TYPE from "../common/constants/externalInfoType";
import TextInfoElement from "./TextInfoElement";
import INFO_EVENTS from "../common/constants/infoEvents";
var InfoElement = /** @class */ (function (_super) {
  __extends(InfoElement, _super);
  function InfoElement(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      showShare: false,
    };
    _this.shouldShowHoverOnMobile = _this.shouldShowHoverOnMobile.bind(_this);
    _this.shouldHover = _this.shouldHover.bind(_this);
    _this.isSmallItem = _this.isSmallItem.bind(_this);
    _this.isNarrow = _this.isNarrow.bind(_this);
    _this.isShort = _this.isShort.bind(_this);
    _this.isVerticalContainer = _this.isVerticalContainer.bind(_this);
    _this.toggleShare = _this.toggleShare.bind(_this);
    _this.hasRequiredMediaUrl = _this.hasRequiredMediaUrl.bind(_this);
    _this.getShare = _this.getShare.bind(_this);
    _this.getSocial = _this.getSocial.bind(_this);
    _this.getItemTextsDetails = _this.getItemTextsDetails.bind(_this);
    _this.createHoverInfoElement = _this.createHoverInfoElement.bind(_this);
    _this.createAboveBelowRightLeftInfoElement =
      _this.createAboveBelowRightLeftInfoElement.bind(_this);
    _this.createSlideshowInfoElement =
      _this.createSlideshowInfoElement.bind(_this);
    return _this;
  }
  InfoElement.prototype.shouldShowHoverOnMobile = function () {
    var _a = this.props,
      isMobile = _a.isMobile,
      viewMode = _a.viewMode;
    if (isMobile) {
      var _b = this.props.options,
        allowDescription = _b.allowDescription,
        allowTitle = _b.allowTitle,
        titlePlacement = _b.titlePlacement,
        hoveringBehaviour = _b.hoveringBehaviour,
        itemClick = _b.itemClick,
        alwaysShowHover = _b.alwaysShowHover,
        previewHover = _b.previewHover;
      if (
        hoveringBehaviour === GALLERY_v4_CONSTS.infoBehaviourOnHover.NEVER_SHOW
      ) {
        return false;
      }
      if (itemClick === "nothing" && this.props.type !== "video") {
        return true;
      } else if (
        (allowTitle || allowDescription) &&
        GALLERY_v4_CONSTS.hasHoverPlacement(titlePlacement) &&
        hoveringBehaviour !== GALLERY_v4_CONSTS.infoBehaviourOnHover.NEVER_SHOW
      ) {
        return true;
      }
      if (alwaysShowHover) {
        return true;
      }
      if (viewMode === GALLERY_v4_CONSTS.viewMode.EDIT && previewHover) {
        return true;
      }
    }
    return false;
  };
  InfoElement.prototype.shouldHover = function () {
    // see if this could be decided in the preset
    var _a = this.props,
      options = _a.options,
      viewMode = _a.viewMode,
      isMobile = _a.isMobile;
    if (
      options.hoveringBehaviour ===
      GALLERY_v4_CONSTS.infoBehaviourOnHover.NEVER_SHOW
    ) {
      return false;
    } else if (options.alwaysShowHover === true) {
      return true;
    } else if (
      viewMode === GALLERY_v4_CONSTS.viewMode.EDIT &&
      options.previewHover
    ) {
      return true;
    } else if (isMobile) {
      return this.shouldShowHoverOnMobile();
    } else {
      return true;
    }
  };
  InfoElement.prototype.isShort = function () {
    return isShort(this.props);
  };
  InfoElement.prototype.isVerticalContainer = function () {
    return isVerticalContainer(this.props);
  };
  InfoElement.prototype.isIconTag = function (tagName) {
    return (
      ["button", "i", "a", "svg", "path"].indexOf(tagName.toLowerCase()) >= 0
    );
  };
  InfoElement.prototype.itemHasLink = function () {
    var _a = this.props,
      linkData = _a.linkData,
      linkUrl = _a.linkUrl;
    var itemDoesntHaveLink =
      (!linkData || linkData.type === undefined) &&
      (linkUrl === undefined || linkUrl === ""); // when itemClick is 'link' but no link was added to this specific item
    return !itemDoesntHaveLink;
  };
  InfoElement.prototype.toggleShare = function (event, forceVal) {
    event.stopPropagation();
    event.preventDefault();
    if (
      event.type === "mouseout" &&
      (this.isIconTag(event.target.tagName) ||
        (event.relatedTarget && this.isIconTag(event.relatedTarget.tagName)))
    ) {
      // mouseout event should not be fired if hovering over icons (tag name === I)
      return;
    }
    if (this.props.shouldUseNewSocialSharePopup) {
      this.props.actions.eventsListener(
        INFO_EVENTS.SOCIAL_SHARE_BUTTON_CLICKED,
        __assign({ showSocialSharePopup: true }, this.props)
      );
    } else {
      this.setState({
        showShare:
          typeof forceVal === "undefined" ? !this.state.showShare : !!forceVal,
      });
    }
  };
  InfoElement.prototype.getShare = function () {
    return React.createElement(
      Share,
      __assign({}, this.props, {
        key: "item-share-".concat(this.props.id),
        showShare: this.state.showShare,
        isVerticalContainer: this.isVerticalContainer(),
        actions: {
          toggleShare: this.toggleShare,
          eventsListener: this.props.eventsListener,
        },
      })
    );
  };
  InfoElement.prototype.getSocial = function () {
    return React.createElement(
      Social,
      __assign({}, this.props, {
        showShare: this.state.showShare,
        isSmallItem: this.isSmallItem(),
        isNarrow: this.isNarrow(),
        isShort: this.isShort(),
        isVerticalContainer: this.isVerticalContainer(),
        key: "item-social-".concat(this.props.id),
        actions: {
          toggleShare: this.toggleShare,
          getShare: this.getShare,
          eventsListener: this.props.eventsListener,
        },
        shouldUseNewSocialSharePopup: this.props.shouldUseNewSocialSharePopup,
      })
    );
  };
  InfoElement.prototype.getInfoContainerStyles = function () {
    var _a = this.props,
      options = _a.options,
      infoType = _a.infoType;
    var infoStyles = { height: "100%", width: "100%" };
    if (infoType === EXTERNAL_INFO_TYPE.EXTERNAL) {
      var itemHasLink = this.itemHasLink();
      infoStyles = __assign(__assign({}, infoStyles), {
        cursor:
          options.itemClick === GALLERY_v4_CONSTS.itemClick.NOTHING ||
          (options.itemClick === GALLERY_v4_CONSTS.itemClick.LINK &&
            !itemHasLink)
            ? "default"
            : "pointer",
      });
    } else if (infoType === EXTERNAL_INFO_TYPE.SLIDESHOW) {
      infoStyles = __assign(__assign({}, infoStyles), {
        cursor:
          options.itemClick === GALLERY_v4_CONSTS.itemClick.NOTHING ||
          options.itemClick === GALLERY_v4_CONSTS.itemClick.LINK
            ? "default"
            : "pointer",
      });
    }
    return infoStyles;
  };
  InfoElement.prototype.createHoverInfoElement = function () {
    var options = this.props.options;
    var social = this.getSocial();
    var share = this.getShare();
    var hoverStyles = {
      height: "100%",
      boxSizing: "border-box",
      paddingLeft: options.textsHorizontalPadding + "px",
      paddingRight: options.textsHorizontalPadding + "px",
      paddingTop:
        (options.galleryVerticalAlign !== "center"
          ? options.textsVerticalPadding
          : 0) + "px",
      paddingBottom:
        (options.galleryVerticalAlign !== "center"
          ? options.textsVerticalPadding
          : 0) + "px",
    };
    var itemTexts =
      GALLERY_v4_CONSTS.hasHoverPlacement(options.titlePlacement) &&
      options.hoveringBehaviour !==
        GALLERY_v4_CONSTS.infoBehaviourOnHover.NEVER_SHOW
        ? this.getItemTextsDetails()
        : null; // if titlePlacement (title & description) is BELOW or ABOVE or RIGHT or LEFT, it is not part of the itemHover
    return React.createElement(
      "div",
      {
        className: "hover-info-element",
        "data-hook": "hover-info-element",
        style: hoverStyles,
      },
      itemTexts,
      social,
      share
    );
  };
  InfoElement.prototype.createSlideshowInfoElement = function () {
    var social = this.getSocial();
    var itemTexts = this.getItemTextsDetails();
    var options = this.props.options;
    var innerStyle = GALLERY_v4_CONSTS.isLayout("SLIDESHOW")(options)
      ? {
          alignItems: options.galleryHorizontalAlign,
          display: "flex",
          flexDirection: "column",
        }
      : {};
    return React.createElement(
      "div",
      {
        "data-hook": "slideshow-info-element",
        className: "gallery-slideshow-info",
        style: { height: "100%", overflow: "hidden" },
      },
      React.createElement(
        "div",
        { style: innerStyle, className: "slideshow-info-element-inner" },
        social,
        itemTexts
      )
    );
  };
  InfoElement.prototype.createAboveBelowRightLeftInfoElement = function () {
    return this.createTextInfoElement();
  };
  InfoElement.prototype.render = function () {
    var _this = this;
    var infoType = this.props.infoType;
    var infoElement;
    switch (infoType) {
      case EXTERNAL_INFO_TYPE.SLIDESHOW:
        infoElement = this.createSlideshowInfoElement();
        break;
      case EXTERNAL_INFO_TYPE.EXTERNAL:
        infoElement = this.createAboveBelowRightLeftInfoElement();
        break;
      case EXTERNAL_INFO_TYPE.HOVER:
        infoElement = this.createHoverInfoElement();
        break;
      default:
        console.warn("InfoElement -> EXTERNAL_INFO_TYPE was not selected");
    }
    return React.createElement(
      "div",
      {
        "data-hook": "info-element",
        ref: function (e) {
          return (_this.infoContainer = e);
        },
        style: this.getInfoContainerStyles(),
      },
      infoElement
    );
  };
  return InfoElement;
})(TextInfoElement);
export default InfoElement;
//# sourceMappingURL=InfoElement.js.map
