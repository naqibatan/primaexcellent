import { __assign, __extends } from "tslib";
import React from "react";
import { CustomImageRenderer } from "./imageSourceRender";
var StagedCustomImageRenderer = /** @class */ (function (_super) {
  __extends(StagedCustomImageRenderer, _super);
  function StagedCustomImageRenderer(props) {
    var _this = _super.call(this, props) || this;
    _this.handleCurrentLoaded = function () {
      _this.setState({
        previous: undefined,
      });
      _this.props.onLoad();
    };
    _this.getCurrentImage = function () {
      var props = __assign(__assign({}, _this.props), {
        onLoad: _this.handleCurrentLoaded,
      });
      return React.createElement(CustomImageRenderer, __assign({}, props));
    };
    _this.getPreviousImage = function () {
      var props = __assign(__assign({}, _this.props), _this.state.previous);
      return React.createElement(CustomImageRenderer, __assign({}, props));
    };
    _this.state = {
      current: { src: props.src },
    };
    return _this;
  }
  // private mounted = false;
  // componentDidMount() {
  //   this.mounted = true;
  // }
  StagedCustomImageRenderer.prototype.UNSAFE_componentWillReceiveProps =
    function (nextProps) {
      if (JSON.stringify(this.props.src) !== JSON.stringify(nextProps.src)) {
        this.setState({
          previous: { src: this.props.src },
        });
      }
    };
  StagedCustomImageRenderer.prototype.render = function () {
    var arr = [];
    arr.push(this.getCurrentImage());
    if (this.state.previous) {
      arr.push(this.getPreviousImage());
    }
    return arr;
  };
  return StagedCustomImageRenderer;
})(React.Component);
export { StagedCustomImageRenderer };
//# sourceMappingURL=StagedImageSourceRender.js.map
