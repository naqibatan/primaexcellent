import { __assign, __extends } from "tslib";
import React from "react";
import { PrintOnlyImageSource } from "pro-gallery";
function canReplace(src, base, target) {
  return src.indexOf(base) > 0 && src.indexOf(target) > -1 ? true : false;
}
function replaceWebp(src, target) {
  return src.replace("webp", target);
}
function originalSource(src) {
  if (canReplace(src, ".webp", ".png")) {
    return React.createElement("source", {
      srcSet: replaceWebp(src, "png"),
      type: "image/png",
    });
  }
  if (canReplace(src, ".webp", ".jpg") || canReplace(src, ".webp", ".jpeg")) {
    return React.createElement("source", {
      srcSet: replaceWebp(src, "jpeg"),
      type: "image/jpeg",
    });
  }
  return null;
}
function webpSource(src) {
  if (src.match(/\.\w{3,4}\/v\d\/\w*\//)) {
    // only change resized urls
    return React.createElement("source", {
      srcSet: src.replace(/(jpg|jpeg|png)$/, "webp"),
      type: "image/webp",
    });
  }
  return null;
}
var CustomImageRenderer = /** @class */ (function (_super) {
  __extends(CustomImageRenderer, _super);
  function CustomImageRenderer() {
    var _this = (_super !== null && _super.apply(this, arguments)) || this;
    _this.myRef = React.createRef();
    return _this;
  }
  CustomImageRenderer.prototype.componentDidMount = function () {
    var _a;
    if (
      ((_a = this.myRef.current) === null || _a === void 0
        ? void 0
        : _a.complete) &&
      typeof this.props.onLoad === "function"
    ) {
      this.props.onLoad();
    }
  };
  CustomImageRenderer.prototype.render = function () {
    var props = this.props;
    if (typeof props.src === "string") {
      var src = props.src;
      var imageProps = getImageProps(src, props);
      return React.createElement(
        "picture",
        { key: "picture_".concat(props.id) },
        webpSource(props.src),
        originalSource(props.src),
        React.createElement("img", __assign({}, imageProps))
      );
    } else if (typeof props.src === "object") {
      var src = props.src[props.src.length - 1].url;
      var imageProps = getImageProps(src, props);
      if (props.priorityLoading === true) {
        imageProps.loading = "eager";
        imageProps.fetchpriority = "high";
      } else if (props.priorityLoading === false) {
        imageProps.loading = "lazy";
      } else {
        //leave the imageProps to the core logic.
      }
      return React.createElement(
        "picture",
        { key: "multi_picture_".concat(props.id) },
        props.src.map(function (currentSrc) {
          var type = "image/".concat(currentSrc.type);
          var srcSet = currentSrc.dpr || currentSrc.url;
          var Source = currentSrc.forPrinting ? PrintOnlyImageSource : "source";
          // @ts-ignore
          return React.createElement(Source, { srcSet: srcSet, type: type });
        }),
        React.createElement("img", __assign({ ref: this.myRef }, imageProps))
      );
    }
    return null;
  };
  return CustomImageRenderer;
})(React.Component);
export { CustomImageRenderer };
function getImageProps(src, props) {
  return __assign(__assign({}, props), { src: src });
}
//# sourceMappingURL=imageSourceRender.js.map
