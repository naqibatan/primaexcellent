import { __assign, __extends, __spreadArrays } from "tslib";
import React from "react";
import Emitter from "./emitter";
import { proxy } from "./proxy";
import { utils } from "pro-gallery-lib";
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export function mouseFollower(container) {
  var emitter = new Emitter();
  var getMousePosition = function (event) {
    var bounding = container.getBoundingClientRect();
    var position = [
      event.clientX - bounding.left,
      event.clientY - bounding.top,
    ];
    return position;
  };
  function onMouseEnter(event) {
    var _a;
    var position = getMousePosition(event);
    (_a = emitter.call).mouseEnterState.apply(
      _a,
      __spreadArrays(
        [
          !isHoveringClickableElement.apply(
            void 0,
            __spreadArrays([container, event], position)
          ),
        ],
        position
      )
    );
  }
  function onMouseMove(event) {
    var _a, _b;
    var position = getMousePosition(event);
    (_a = emitter.call).mouseEnterState.apply(
      _a,
      __spreadArrays(
        [
          !isHoveringClickableElement.apply(
            void 0,
            __spreadArrays([container, event], position)
          ),
        ],
        position
      )
    );
    (_b = emitter.call).mouseMove.apply(_b, position);
  }
  function onMouseLeave() {
    emitter.call.mouseEnterState(false, 0, 0);
  }
  function onClick(event) {
    emitter.call.mouseClick(event);
  }
  container.addEventListener("mouseenter", onMouseEnter);
  container.addEventListener("mousemove", onMouseMove);
  container.addEventListener("mouseleave", onMouseLeave);
  container.addEventListener("click", onClick);
  return {
    listen: emitter.listen,
    destroy: function () {
      container.removeEventListener("mouseenter", onMouseEnter);
      container.removeEventListener("mousemove", onMouseMove);
      container.removeEventListener("mouseleave", onMouseLeave);
      container.removeEventListener("click", onClick);
    },
  };
}
var getContainerById = function (id) {
  return document.getElementById("pro-gallery-container-" + id);
};
var MouseCursor = /** @class */ (function (_super) {
  __extends(MouseCursor, _super);
  function MouseCursor() {
    var _this = (_super !== null && _super.apply(this, arguments)) || this;
    _this.state = {
      position: [0, 0],
      mouseIn: false,
    };
    return _this;
  }
  MouseCursor.prototype.componentDidMount = function () {
    var _this = this;
    var element = this.props.getElement();
    this.mouseFollower = mouseFollower(element);
    this.mouseFollower.listen.mouseMove(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      utils.throttle(function (x, y) {
        _this.setState({
          position: [x, y],
        });
      }, this.props.throttle)
    );
    this.mouseFollower.listen.mouseEnterState(function (mouseIn) {
      var position = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        position[_i - 1] = arguments[_i];
      }
      if (_this.state.mouseIn !== mouseIn) {
        _this.setState({
          mouseIn: mouseIn,
          position: position,
        });
        if (_this.props.onEnterState) {
          _this.props.onEnterState(mouseIn);
        }
      }
    });
    this.mouseFollower.listen.mouseClick(function (e) {
      if (!_this.state.mouseIn) {
        return;
      }
      var _a = _this.state.position,
        x = _a[0],
        y = _a[1];
      if (!_this.props.shouldRenderAtPosition(x, y)) {
        return;
      }
      _this.props.onClick(e);
    });
  };
  MouseCursor.prototype.componentWillUnmount = function () {
    var _a;
    (_a = this.mouseFollower) === null || _a === void 0 ? void 0 : _a.destroy();
  };
  MouseCursor.prototype.render = function () {
    if (!this.state.mouseIn) {
      return null;
    }
    var _a = this.state.position,
      x = _a[0],
      y = _a[1];
    if (!this.props.shouldRenderAtPosition(x, y)) {
      return null;
    }
    return this.props.render(this.state.position[0], this.state.position[1]);
  };
  return MouseCursor;
})(React.Component);
export { MouseCursor };
var CLICKABLE_ATTR = "pg-clickable";
var isHoveringClickableElement = function (element, e, x, y) {
  // cancel the click event
  for (var _i = 0, _a = e.composedPath(); _i < _a.length; _i++) {
    var ele = _a[_i];
    if (
      ele instanceof HTMLElement &&
      ele.getAttribute(CLICKABLE_ATTR) === "true"
    ) {
      return true;
    }
  }
  var bounding = element.getBoundingClientRect();
  var elementUnderMouse = document.elementFromPoint(
    x + bounding.left,
    y + bounding.top
  );
  if (!elementUnderMouse) {
    return false;
  }
  var parent = elementUnderMouse;
  while (parent) {
    if (parent.getAttribute(CLICKABLE_ATTR) === "true") {
      return true;
    }
    parent = parent.parentElement;
  }
  return false;
};
var ArrowFollower = /** @class */ (function (_super) {
  __extends(ArrowFollower, _super);
  function ArrowFollower() {
    var _this = (_super !== null && _super.apply(this, arguments)) || this;
    _this.shouldRender = function (x) {
      var element = getContainerById(_this.props.id);
      var containerWidth = element.offsetWidth;
      var realMaxWidth = Math.min(
        _this.props.mouseCursorContainerMaxWidth,
        _this.props.isTheOnlyArrow ? 100 : 50
      );
      var amountOfPixelsNeeded = containerWidth * (realMaxWidth / 100);
      var isLeft = amountOfPixelsNeeded > x;
      var isRight = x > containerWidth - amountOfPixelsNeeded;
      return _this.props.direction === "left" ? isLeft : isRight;
    };
    _this.onNavigation = function (e) {
      e.preventDefault();
      e.stopPropagation();
      _this.props.onNavigate();
    };
    return _this;
  }
  ArrowFollower.prototype.render = function () {
    var _this = this;
    return React.createElement(MouseCursor, {
      getElement: function () {
        return getContainerById(_this.props.id);
      },
      render: function (x, y) {
        var _a;
        return React.createElement(
          React.Fragment,
          null,
          _this.props.children(x, y),
          React.createElement(
            "style",
            null,
            "\n                  #" +
              ((_a = getContainerById(_this.props.id)) === null || _a === void 0
                ? void 0
                : _a.id) +
              " * {\n                    cursor: none !important;\n                  }\n              "
          )
        );
      },
      shouldRenderAtPosition: this.shouldRender,
      onClick: this.onNavigation,
      throttle: 50,
    });
  };
  return ArrowFollower;
})(React.Component);
export { ArrowFollower };
export function clickableFactory() {
  var instances = new Map();
  return proxy(function (name) {
    if (!instances.get(name)) {
      instances.set(name, function (props) {
        var _a;
        return React.createElement(
          name,
          __assign(
            __assign({}, props),
            ((_a = {}), (_a[CLICKABLE_ATTR] = "true"), _a)
          )
        );
      });
    }
    return instances.get(name);
  });
}
export var clickable = clickableFactory();
//# sourceMappingURL=mouseCursorPosition.js.map
