import { __assign, __extends } from "tslib";
import React from "react";
import { GALLERY_CONSTS, utils } from "pro-gallery-lib";
import TextItem from "../../item/textItem.js";
import {
  getThumbnailsData,
  clearGalleryItems,
} from "../../helpers/thumbnailsLogic";
var NavigationPanel = /** @class */ (function (_super) {
  __extends(NavigationPanel, _super);
  function NavigationPanel(props) {
    var _this = _super.call(this, props) || this;
    _this.scrollToThumbnail = _this.scrollToThumbnail.bind(_this);
    return _this;
  }
  NavigationPanel.prototype.scrollToThumbnail = function (itemIdx) {
    this.props.navigationToIdxCB(itemIdx);
  };
  NavigationPanel.prototype.createThumbnails = function (_a) {
    var _this = this;
    var navigationPanelPosition = _a.navigationPanelPosition,
      thumbnailAlignment = _a.thumbnailAlignment,
      options = _a.options,
      galleryStructure = _a.galleryStructure,
      settings = _a.settings;
    var clearedGalleryItems = clearGalleryItems(
      this.props.items,
      this.props.galleryStructure.galleryItems
    );
    var activeIndex = utils.inRange(
      this.props.activeIndex,
      clearedGalleryItems.length
    );
    var thumbnailSize = options.thumbnailSize,
      thumbnailSpacings = options.thumbnailSpacings;
    var _b = getThumbnailsData({
        items: this.props.items,
        activeIndex: activeIndex,
        options: options,
        galleryStructure: galleryStructure,
        thumbnailAlignment: thumbnailAlignment,
        containerHeight: this.props.container.height,
        containerWidth: this.props.container.width,
        activeIndexOffsetMemory: this.activeIndexOffsetMemory,
        prevActiveIndex: this.prevActiveIndex,
      }),
      horizontalThumbnails = _b.horizontalThumbnails,
      items = _b.items,
      thumbnailsMargins = _b.thumbnailsMargins,
      thumbnailsStyle = _b.thumbnailsStyle,
      activeIndexOffsetMemory = _b.activeIndexOffsetMemory;
    this.prevActiveIndex = activeIndex;
    this.activeIndexOffsetMemory = activeIndexOffsetMemory;
    return React.createElement(
      "div",
      {
        className:
          "pro-gallery inline-styles thumbnails-gallery " +
          (horizontalThumbnails ? " one-row hide-scrollbars " : "") +
          (options.isRTL ? " rtl " : " ltr ") +
          ((
            settings === null || settings === void 0
              ? void 0
              : settings.isAccessible
          )
            ? " accessible "
            : ""),
        style: __assign(
          __assign(
            { width: thumbnailsStyle.width, height: thumbnailsStyle.height },
            thumbnailsMargins
          ),
          getNavigationPanelOnGalleryPositionStyles({
            galleryThumbnailsAlignment: thumbnailAlignment,
            navigationPanelPosition: navigationPanelPosition,
          })
        ),
        "data-hook": "gallery-thumbnails",
      },
      React.createElement(
        "div",
        {
          "data-hook": "gallery-thumbnails-column",
          className: "galleryColumn",
          key: "thumbnails-column",
          style: __assign({}, thumbnailsStyle),
        },
        items.map(function (_a) {
          var thumbnailItem = _a.thumbnailItem,
            location = _a.location,
            idx = _a.idx;
          var highlighted = idx === activeIndex;
          var itemStyle = __assign(
            {
              width: thumbnailSize,
              height: thumbnailSize,
              marginLeft: thumbnailSpacings,
              marginTop: thumbnailSpacings,
              overflow: "hidden",
              backgroundImage:
                "url(" +
                thumbnailItem.createUrl(
                  GALLERY_CONSTS.urlSizes.THUMBNAIL,
                  GALLERY_CONSTS.urlTypes.HIGH_RES
                ) +
                ")",
            },
            location
          );
          return React.createElement(
            "div",
            {
              key:
                "thumbnail-" +
                thumbnailItem.id +
                (Number.isInteger(idx) ? "-" + idx : ""),
              className:
                "thumbnailItem" +
                (highlighted
                  ? " pro-gallery-thumbnails-highlighted pro-gallery-highlight" +
                    (utils.isMobile() ? " pro-gallery-mobile-indicator" : "")
                  : ""),
              "data-key": thumbnailItem.id,
              style: itemStyle,
              onClick: function () {
                return _this.scrollToThumbnail(idx);
              },
            },
            thumbnailItem.type === "text"
              ? React.createElement(
                  TextItem,
                  __assign({}, _this.props, thumbnailItem.renderProps(), {
                    options: __assign(__assign({}, options), {
                      cubeType: "fill",
                      cubeImages: true,
                    }),
                    actions: {},
                    imageDimensions: __assign(__assign({}, itemStyle), {
                      marginTop: 0,
                      marginLeft: 0,
                    }),
                    style: __assign(
                      __assign({}, thumbnailItem.renderProps().style),
                      itemStyle
                    ),
                  })
                )
              : null
          );
        })
      )
    );
  };
  //-----------------------------------------| RENDER |--------------------------------------------//
  NavigationPanel.prototype.render = function () {
    var navigationPanelPosition =
      this.props.options.layoutParams.thumbnails.position;
    var navigationRelevantProps = {
      navigationPanelPosition: navigationPanelPosition,
      thumbnailAlignment: this.props.options.galleryThumbnailsAlignment,
      options: this.props.options,
      galleryStructure: this.props.galleryStructure,
      settings: this.props.settings,
    };
    return this.createThumbnails(navigationRelevantProps);
  };
  return NavigationPanel;
})(React.Component);
var getHorizontalNavigationPanelDimensions = function (_a) {
  var width = _a.width,
    height = _a.height,
    galleryHeight = _a.galleryHeight,
    navigationPanelPosition = _a.navigationPanelPosition;
  if (navigationPanelPosition === "ON_GALLERY") {
    return {};
  } else {
    return { width: width, height: height - galleryHeight };
  }
};
var getVerticalNavigationPanelDimensions = function (_a) {
  var width = _a.width,
    height = _a.height,
    galleryWidth = _a.galleryWidth,
    navigationPanelPosition = _a.navigationPanelPosition;
  if (navigationPanelPosition === "ON_GALLERY") {
    return {};
  } else {
    return { width: width - galleryWidth, height: height };
  }
};
var getCustomNavigationPanelDimensions = function (_a) {
  var galleryHeight = _a.galleryHeight,
    galleryWidth = _a.galleryWidth,
    height = _a.height,
    width = _a.width,
    galleryThumbnailsAlignment = _a.galleryThumbnailsAlignment,
    navigationPanelPosition = _a.navigationPanelPosition;
  switch (galleryThumbnailsAlignment) {
    case "top": //TODO use CONSTS if available
      return getHorizontalNavigationPanelDimensions(
        {
          galleryHeight: galleryHeight,
          galleryWidth: galleryWidth,
          height: height,
          width: width,
          navigationPanelPosition: navigationPanelPosition,
        },
        false
      );
    case "bottom":
      return getHorizontalNavigationPanelDimensions(
        {
          galleryHeight: galleryHeight,
          galleryWidth: galleryWidth,
          height: height,
          width: width,
          navigationPanelPosition: navigationPanelPosition,
        },
        true
      );
    case "right":
    case "left":
      return getVerticalNavigationPanelDimensions({
        galleryHeight: galleryHeight,
        galleryWidth: galleryWidth,
        height: height,
        width: width,
        navigationPanelPosition: navigationPanelPosition,
      });
    default:
      return false;
  }
};
export var getCustomNavigationPanelInlineStyles = function (_a) {
  var galleryHeight = _a.galleryHeight,
    galleryWidth = _a.galleryWidth,
    height = _a.height,
    width = _a.width,
    galleryThumbnailsAlignment = _a.galleryThumbnailsAlignment,
    navigationPanelPosition = _a.navigationPanelPosition;
  return __assign(
    __assign(
      __assign(
        {},
        getCustomNavigationPanelDimensions({
          galleryHeight: galleryHeight,
          galleryWidth: galleryWidth,
          height: height,
          width: width,
          galleryThumbnailsAlignment: galleryThumbnailsAlignment,
          navigationPanelPosition: navigationPanelPosition,
        })
      ),
      getNavigationPanelOnGalleryPositionStyles({
        galleryThumbnailsAlignment: galleryThumbnailsAlignment,
        navigationPanelPosition: navigationPanelPosition,
      })
    ),
    { overflow: "hidden", float: "left" }
  );
};
var getNavigationPanelOnGalleryPositionStyles = function (_a) {
  var galleryThumbnailsAlignment = _a.galleryThumbnailsAlignment,
    navigationPanelPosition = _a.navigationPanelPosition;
  if (
    navigationPanelPosition === GALLERY_CONSTS.thumbnailsPosition.ON_GALLERY
  ) {
    var onGalleryStyles = { position: "absolute" };
    onGalleryStyles[galleryThumbnailsAlignment] = 0;
    return onGalleryStyles;
  }
};
export default NavigationPanel;
//# sourceMappingURL=navigationPanel.js.map
