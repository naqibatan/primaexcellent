import React from "react";
import { utils, GALLERY_CONSTS } from "pro-gallery-lib";
import { ARROWS_DATA } from "../svgs";
var getArrowsSizeData = function (_a) {
  var customNavArrowsRenderer = _a.customNavArrowsRenderer,
    arrowsSize = _a.arrowsSize,
    svgData = _a.svgData,
    containerStyleType = _a.containerStyleType;
  var isLandscape = svgData.width / svgData.height > 1;
  if (containerStyleType === GALLERY_CONSTS.arrowsContainerStyleType.BOX) {
    var sizeData = {
      navArrowsContainerWidth: arrowsSize,
      navArrowsContainerHeight: arrowsSize,
      scalePercentage:
        arrowsSize / 2.4 / (isLandscape ? svgData.width : svgData.height),
    };
    return sizeData;
  }
  if (customNavArrowsRenderer) {
    return {
      navArrowsContainerWidth: arrowsSize,
      navArrowsContainerHeight: arrowsSize,
    };
  }
  var scalePercentage = arrowsSize / svgData.width;
  return {
    scalePercentage: scalePercentage,
    navArrowsContainerWidth: arrowsSize,
    navArrowsContainerHeight: svgData.height * scalePercentage,
  };
};
export var getArrowsRenderData = function (arrowsDataRelevantArgs) {
  var customNavArrowsRenderer = arrowsDataRelevantArgs.customNavArrowsRenderer,
    arrowsColor = arrowsDataRelevantArgs.arrowsColor,
    arrowsSize = arrowsDataRelevantArgs.arrowsSize,
    arrowsType = arrowsDataRelevantArgs.arrowsType,
    containerStyleType = arrowsDataRelevantArgs.containerStyleType;
  var arrowData = getArrowIconData(arrowsType);
  var _a = getArrowsSizeData({
      customNavArrowsRenderer: customNavArrowsRenderer,
      arrowsSize: arrowsSize,
      svgData: arrowData,
      containerStyleType: containerStyleType,
    }),
    navArrowsContainerWidth = _a.navArrowsContainerWidth,
    navArrowsContainerHeight = _a.navArrowsContainerHeight,
    scalePercentage = _a.scalePercentage;
  if (customNavArrowsRenderer) {
    var size_1 =
      containerStyleType === GALLERY_CONSTS.arrowsContainerStyleType.BOX
        ? arrowsSize / 2.4
        : arrowsSize;
    var customRenderer = function (position) {
      return React.createElement(
        "div",
        {
          style: {
            width: size_1,
            height: size_1,
          },
        },
        customNavArrowsRenderer(position)
      );
    };
    return {
      arrowRenderer: customRenderer,
      navArrowsContainerWidth: navArrowsContainerWidth,
      navArrowsContainerHeight: navArrowsContainerHeight,
    };
  }
  var arrowRenderer = function (position) {
    var scaleX = position === "right" ? 1 : -1;
    var style = {
      transform: "scaleX(" + scaleX + ") scale(" + scalePercentage + ")",
      fill:
        utils.isMobile() &&
        (arrowsColor === null || arrowsColor === void 0
          ? void 0
          : arrowsColor.value)
          ? arrowsColor.value
          : "",
    };
    return React.createElement(arrowData.SvgComp, { style: style });
  };
  return {
    arrowRenderer: arrowRenderer,
    navArrowsContainerWidth: navArrowsContainerWidth,
    navArrowsContainerHeight: navArrowsContainerHeight,
  };
};
// Function that checks if the nav arrows parent-container is large enough for them
var arrowsWillFitPosition = function (arrowsWillFitPositionRelevantArgs) {
  var _a = arrowsWillFitPositionRelevantArgs.options,
    arrowsVerticalPosition = _a.arrowsVerticalPosition,
    textBoxHeight = _a.textBoxHeight,
    arrowsSize = _a.arrowsSize,
    layoutParams = _a.layoutParams;
  var height = arrowsWillFitPositionRelevantArgs.container.height;
  var customNavArrowsRenderer =
    arrowsWillFitPositionRelevantArgs.customNavArrowsRenderer;
  // Calc of Nav arrows container's height
  var arrowData = getArrowIconData(layoutParams.navigationArrows.type);
  var navArrowsContainerHeight = getArrowsSizeData({
    customNavArrowsRenderer: customNavArrowsRenderer,
    arrowsSize: arrowsSize,
    svgData: arrowData,
    containerStyleType:
      layoutParams.navigationArrows.container.containerStyleType,
  }).navArrowsContainerHeight;
  var infoHeight = textBoxHeight;
  var parentHeightByVerticalPosition = {
    INFO_CENTER: infoHeight,
    IMAGE_CENTER: height - infoHeight,
    ITEM_CENTER: height,
  };
  var parentHeight = parentHeightByVerticalPosition[arrowsVerticalPosition];
  return parentHeight >= navArrowsContainerHeight;
};
// function to Determine whether we should render the navigation arrows
export var shouldRenderNavArrows = function (props) {
  var shouldRenderArrowsRelevantArgs = getShouldRenderArrowsArgs(props);
  var showArrows = shouldRenderArrowsRelevantArgs.options.showArrows;
  var galleryWidth = shouldRenderArrowsRelevantArgs.container.galleryWidth;
  var isPrerenderMode = shouldRenderArrowsRelevantArgs.isPrerenderMode,
    galleryStructure = shouldRenderArrowsRelevantArgs.galleryStructure,
    customNavArrowsRenderer =
      shouldRenderArrowsRelevantArgs.customNavArrowsRenderer;
  var arrowsWillFitPositionRelevantArgs = {
    options: shouldRenderArrowsRelevantArgs.options,
    container: shouldRenderArrowsRelevantArgs.container,
    customNavArrowsRenderer: customNavArrowsRenderer,
  };
  var isGalleryWiderThanRenderedItems = galleryStructure.width <= galleryWidth;
  return (
    !!showArrows &&
    !isPrerenderMode &&
    arrowsWillFitPosition(arrowsWillFitPositionRelevantArgs) &&
    !isGalleryWiderThanRenderedItems
  );
};
var getShouldRenderArrowsArgs = function (props) {
  var isPrerenderMode = props.isPrerenderMode,
    galleryStructure = props.galleryStructure,
    customNavArrowsRenderer = props.customNavArrowsRenderer;
  return {
    options: props.options,
    container: props.container,
    isPrerenderMode: isPrerenderMode,
    galleryStructure: galleryStructure,
    customNavArrowsRenderer: customNavArrowsRenderer,
  };
};
var getArrowIconData = function (arrowType) {
  if (arrowType === void 0) {
    arrowType = GALLERY_CONSTS.arrowsType.DEFAULT_ARROW;
  }
  var _a = GALLERY_CONSTS.arrowsType,
    DEFAULT_ARROW = _a.DEFAULT_ARROW,
    ARROW_2 = _a.ARROW_2,
    ARROW_3 = _a.ARROW_3,
    ARROW_4 = _a.ARROW_4,
    ARROW_5 = _a.ARROW_5,
    ARROW_6 = _a.ARROW_6,
    ARROW_7 = _a.ARROW_7;
  var arrowData;
  switch (arrowType) {
    case ARROW_2:
      arrowData = ARROWS_DATA.ARROW_2;
      break;
    case ARROW_3:
      arrowData = ARROWS_DATA.ARROW_3;
      break;
    case ARROW_4:
      arrowData = ARROWS_DATA.ARROW_4;
      break;
    case ARROW_5:
      arrowData = ARROWS_DATA.ARROW_5;
      break;
    case ARROW_6:
      arrowData = ARROWS_DATA.ARROW_6;
      break;
    case ARROW_7:
      arrowData = ARROWS_DATA.ARROW_7;
      break;
    case DEFAULT_ARROW:
    default:
      arrowData = ARROWS_DATA.DEFAULT_ARROW;
      break;
  }
  return arrowData;
};
export var getArrowBoxStyle = function (_a) {
  var type = _a.type,
    backgroundColor = _a.backgroundColor,
    borderRadius = _a.borderRadius;
  return type === GALLERY_CONSTS.arrowsContainerStyleType.BOX
    ? {
        backgroundColor: backgroundColor,
        borderRadius: borderRadius + "%",
      }
    : {};
};
//# sourceMappingURL=navigationArrowUtils.js.map
