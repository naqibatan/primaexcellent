import { __assign } from "tslib";
import React from "react";
import * as ReactDOM from "react-dom";
import { GALLERY_CONSTS, utils } from "pro-gallery-lib";
import { ArrowFollower } from "../../helpers/mouseCursorPosition";
import {
  getArrowBoxStyle,
  getArrowsRenderData,
} from "../../helpers/navigationArrowUtils";
export function NavigationArrows(_a) {
  var _b;
  var options = _a.options,
    hideLeftArrow = _a.hideLeftArrow,
    hideRightArrow = _a.hideRightArrow,
    container = _a.container,
    customNavArrowsRenderer = _a.customNavArrowsRenderer,
    next = _a.next,
    id = _a.id;
  var isRTL = options.isRTL,
    scrollDirection = options.scrollDirection,
    imageMargin = options.imageMargin,
    arrowsPadding = options.arrowsPadding,
    arrowsPosition = options.arrowsPosition,
    arrowsVerticalPosition = options.arrowsVerticalPosition,
    layoutParams = options.layoutParams,
    titlePlacement = options.titlePlacement,
    textBoxHeight = options.textBoxHeight,
    arrowsColor = options.arrowsColor,
    arrowsSize = options.arrowsSize;
  var _c = layoutParams.navigationArrows,
    _d = _c.container,
    type = _d.type,
    backgroundColor = _d.backgroundColor,
    borderRadius = _d.borderRadius,
    mouseCursorContainerMaxWidth = _c.mouseCursorContainerMaxWidth;
  var _e = getArrowsRenderData({
      customNavArrowsRenderer: customNavArrowsRenderer,
      arrowsColor: arrowsColor,
      arrowsSize: arrowsSize,
      arrowsType: layoutParams.navigationArrows.type,
      containerStyleType: type,
    }),
    renderArrowSvg = _e.arrowRenderer,
    navArrowsContainerWidth = _e.navArrowsContainerWidth,
    navArrowsContainerHeight = _e.navArrowsContainerHeight;
  var mouseCursorEnabled =
    arrowsPosition === GALLERY_CONSTS.arrowsPosition.MOUSE_CURSOR;
  var galleryHeight = container.galleryHeight;
  var galleryWidth = container.galleryWidth;
  var infoHeight = textBoxHeight;
  var imageHeight = galleryHeight - infoHeight;
  // the nav arrows parent container top edge is imageMargin/2 ABOVE the actual view, that calculates the middle point of gallery
  var galleryVerticalCenter = "50% + " + imageMargin / 4 + "px";
  // Determines the direction fix, the direction in which we move the nav arrows 'vertical position fix' pixels
  var directionFix;
  if (GALLERY_CONSTS.hasExternalAbovePlacement(titlePlacement)) {
    directionFix = -1;
  } else if (GALLERY_CONSTS.hasExternalBelowPlacement(titlePlacement)) {
    directionFix = 1;
  } else {
    // if we got here, we should be ITEM_CENTER, taken care of in layoutHelper.ts
  }
  var verticalPositionFix = ((_b = {}),
  (_b[GALLERY_CONSTS.arrowsVerticalPosition.ITEM_CENTER] = 0),
  (_b[GALLERY_CONSTS.arrowsVerticalPosition.IMAGE_CENTER] =
    infoHeight * directionFix),
  (_b[GALLERY_CONSTS.arrowsVerticalPosition.INFO_CENTER] =
    -imageHeight * directionFix),
  _b)[arrowsVerticalPosition];
  var arrowBoxStyle = getArrowBoxStyle({
    type: type,
    backgroundColor: backgroundColor,
    borderRadius: borderRadius,
  });
  var containerStyle = mouseCursorEnabled
    ? {
        width: galleryWidth + "px",
        maxWidth: mouseCursorContainerMaxWidth + "%",
        height: galleryHeight + "px",
        padding: 0,
        top: 0,
        flex: 1,
      }
    : __assign(
        {
          width: navArrowsContainerWidth + "px",
          height: navArrowsContainerHeight + "px",
          padding: 0,
          top:
            "calc(" +
            galleryVerticalCenter +
            " - " +
            navArrowsContainerHeight / 2 +
            "px - \n        " +
            verticalPositionFix / 2 +
            "px)",
        },
        arrowBoxStyle
      );
  var arrowsPos =
    scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL &&
    arrowsPosition === GALLERY_CONSTS.arrowsPosition.OUTSIDE_GALLERY
      ? "-" + (20 + navArrowsContainerWidth) + "px"
      : imageMargin / 2 + (arrowsPadding ? arrowsPadding : 0) + "px";
  // imageMargin effect the margin of the main div ('pro-gallery-parent-container') that SlideshowView is rendering, so the arrows should be places accordingly
  // arrowsPadding relevant only for arrowsPosition.ON_GALLERY
  var prevContainerStyle = { left: mouseCursorEnabled ? 0 : arrowsPos };
  var nextContainerStyle = { right: mouseCursorEnabled ? 0 : arrowsPos };
  var useDropShadow = type === GALLERY_CONSTS.arrowsContainerStyleType.SHADOW;
  var arrowsBaseClasses = [
    "nav-arrows-container",
    useDropShadow ? "drop-shadow" : "",
    utils.isMobile() ? " pro-gallery-mobile-indicator" : "",
    mouseCursorEnabled ? "follow-mouse-cursor" : "",
  ];
  var navigationArrowPortalId = "arrow-portal-container-" + id;
  var ArrowRenderHandler = mouseCursorEnabled
    ? ArrowButtonWithCursorController
    : ArrowButton;
  var renderArrow = function (directionIsLeft) {
    return React.createElement(
      ArrowRenderHandler,
      __assign(
        {},
        {
          renderArrowSvg: renderArrowSvg,
          next: next,
          directionIsLeft: directionIsLeft,
          arrowsBaseClasses: arrowsBaseClasses,
          tabIndex: utils.getTabIndex.bind(utils),
          containerStyle: containerStyle,
          prevContainerStyle: prevContainerStyle,
          nextContainerStyle: nextContainerStyle,
          isRTL: isRTL,
          hideLeftArrow: hideLeftArrow,
          hideRightArrow: hideRightArrow,
          arrowBoxStyle: arrowBoxStyle,
          navArrowsContainerWidth: navArrowsContainerWidth,
          navArrowsContainerHeight: navArrowsContainerHeight,
          navigationArrowPortalId: navigationArrowPortalId,
          mouseCursorContainerMaxWidth: mouseCursorContainerMaxWidth,
          id: id,
        }
      )
    );
  };
  return React.createElement(
    ArrowsContainer,
    {
      hideLeftArrow: hideLeftArrow,
      hideRightArrow: hideRightArrow,
      mouseCursorEnabled: mouseCursorEnabled,
      isRTL: isRTL,
      navigationArrowPortalId: navigationArrowPortalId,
    },
    hideLeftArrow ? null : renderArrow(true),
    hideRightArrow ? null : renderArrow(false)
  );
}
export function ArrowButton(_a) {
  var _b;
  var cursor = _a.cursor,
    arrowsBaseClasses = _a.arrowsBaseClasses,
    containerStyle = _a.containerStyle,
    prevContainerStyle = _a.prevContainerStyle,
    nextContainerStyle = _a.nextContainerStyle,
    isRTL = _a.isRTL,
    directionIsLeft = _a.directionIsLeft,
    renderArrowSvg = _a.renderArrowSvg,
    next = _a.next,
    tabIndex = _a.tabIndex,
    arrowBoxStyle = _a.arrowBoxStyle,
    navArrowsContainerWidth = _a.navArrowsContainerWidth,
    navArrowsContainerHeight = _a.navArrowsContainerHeight,
    navigationArrowPortalId = _a.navigationArrowPortalId;
  var isNext = (directionIsLeft && isRTL) || (!directionIsLeft && !isRTL);
  var buttonProps =
    ((_b = {
      className: arrowsBaseClasses.join(" "),
      onClick: function () {
        return next({ direction: directionIsLeft ? -1 : 1 });
      },
    }),
    (_b["aria-label"] = (isNext ? "Next" : "Previous") + " Item"),
    (_b.tabIndex = tabIndex(isNext ? "slideshowNext" : "slideshowPrev")),
    (_b.key = !isNext ? "nav-arrow-back" : "nav-arrow-next"),
    (_b["data-hook"] = !isNext ? "nav-arrow-back" : "nav-arrow-next"),
    (_b.style = __assign(
      __assign({}, containerStyle),
      directionIsLeft ? prevContainerStyle : nextContainerStyle
    )),
    _b);
  if (cursor) {
    var containerRef_1 = cursor.containerRef,
      isMouseEnter = cursor.isMouseEnter,
      position = cursor.position;
    return React.createElement(
      "button",
      __assign(
        {
          ref: function (ref) {
            return (containerRef_1.current = ref);
          },
        },
        buttonProps
      ),
      isMouseEnter &&
        ReactDOM.createPortal(
          React.createElement(
            "span",
            {
              style: __assign(
                __assign(
                  {
                    top: position.y - navArrowsContainerHeight / 2,
                    left: position.x - navArrowsContainerWidth / 2,
                  },
                  arrowBoxStyle
                ),
                {
                  width: navArrowsContainerWidth,
                  height: navArrowsContainerHeight,
                }
              ),
            },
            renderArrowSvg(directionIsLeft ? "left" : "right")
          ),
          window.document.getElementById(navigationArrowPortalId)
        )
    );
  }
  return React.createElement(
    "button",
    __assign({}, buttonProps),
    renderArrowSvg(directionIsLeft ? "left" : "right")
  );
}
export function ArrowButtonWithCursorController(props) {
  var directionIsLeft = props.directionIsLeft,
    next = props.next,
    mouseCursorContainerMaxWidth = props.mouseCursorContainerMaxWidth,
    hideLeftArrow = props.hideLeftArrow,
    hideRightArrow = props.hideRightArrow,
    renderArrowSvg = props.renderArrowSvg;
  var isTheOnlyArrow = hideLeftArrow || hideRightArrow;
  return React.createElement(
    ArrowFollower,
    {
      id: props.id,
      mouseCursorContainerMaxWidth: mouseCursorContainerMaxWidth,
      onNavigate: function () {
        return next({ direction: directionIsLeft ? -1 : 1 });
      },
      direction: directionIsLeft ? "left" : "right",
      isTheOnlyArrow: isTheOnlyArrow,
    },
    function (x, y) {
      return React.createElement(
        "div",
        {
          style: {
            position: "absolute",
            top: y,
            left: x,
            transition: "all 0.2s ease",
            pointerEvents: "none",
          },
        },
        renderArrowSvg(directionIsLeft ? "left" : "right")
      );
    }
  );
}
export function ArrowsContainer(_a) {
  var hideRightArrow = _a.hideRightArrow,
    hideLeftArrow = _a.hideLeftArrow,
    mouseCursorEnabled = _a.mouseCursorEnabled,
    isRTL = _a.isRTL,
    children = _a.children,
    navigationArrowPortalId = _a.navigationArrowPortalId;
  if (mouseCursorEnabled) {
    var styleForMouseCursor = {
      justifyContent: hideLeftArrow
        ? "flex-end"
        : hideRightArrow
        ? "flex-start"
        : "space-between",
      flexDirection: isRTL ? "row-reverse" : "row",
    };
    return React.createElement(
      "div",
      { className: "mouse-cursor", style: __assign({}, styleForMouseCursor) },
      React.createElement("div", {
        id: navigationArrowPortalId,
        className: "arrow-portal-container",
      }),
      children
    );
  }
  return React.Fragment
    ? React.createElement(React.Fragment, null, children)
    : React.createElement("div", null, children);
}
//# sourceMappingURL=navigationArrows.js.map
