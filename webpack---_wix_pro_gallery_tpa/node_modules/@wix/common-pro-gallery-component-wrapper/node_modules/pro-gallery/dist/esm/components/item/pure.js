import { __assign } from "tslib";
export { getCustomInfoRendererProps, getLinkParams };
import { GALLERY_CONSTS, utils, isSEOMode } from "pro-gallery-lib";
function getCustomInfoRendererProps(props) {
  return __assign(__assign({}, props), { isMobile: utils.isMobile() });
}
function getLinkParams(_a) {
  var directLink = _a.directLink,
    options = _a.options,
    directShareLink = _a.directShareLink,
    noFollowForSEO = _a.noFollowForSEO;
  var isSEO = isSEOMode();
  if (options.itemClick === GALLERY_CONSTS.itemClick.LINK) {
    var _b = directLink || {},
      url = _b.url,
      target = _b.target;
    var shouldUseNofollow = isSEO && noFollowForSEO;
    var shouldUseDirectLink = !!(url && target);
    var seoLinkParams = shouldUseNofollow ? { rel: "nofollow" } : {};
    var linkParams = shouldUseDirectLink
      ? __assign({ href: url, target: target }, seoLinkParams)
      : {};
    return linkParams;
  } else if (
    options.itemClick === GALLERY_CONSTS.itemClick.FULLSCREEN ||
    options.itemClick === GALLERY_CONSTS.itemClick.EXPAND
  ) {
    // place share link as the navigation item
    var url = directShareLink;
    var shouldUseDirectShareLink = !!url;
    var shouldUseNofollow = !options.shouldIndexDirectShareLinkInSEO;
    var seoLinkParams = shouldUseNofollow ? { rel: "nofollow" } : {};
    var linkParams = shouldUseDirectShareLink
      ? __assign({ href: url, "data-cancel-link": true }, seoLinkParams)
      : {};
    return linkParams;
  }
}
//# sourceMappingURL=pure.js.map
