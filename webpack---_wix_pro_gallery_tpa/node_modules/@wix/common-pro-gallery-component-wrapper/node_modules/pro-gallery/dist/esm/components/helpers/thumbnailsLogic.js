import { __assign } from "tslib";
import { GALLERY_CONSTS, utils } from "pro-gallery-lib";
function calculateActiveIndexOffset(_a) {
  var activeIndex = _a.activeIndex,
    prevActiveIndex = _a.prevActiveIndex,
    activeIndexOffsetMemory = _a.activeIndexOffsetMemory,
    items = _a.items;
  var itemsLength = items.length;
  if (activeIndex === prevActiveIndex) {
    return activeIndexOffsetMemory;
  }
  activeIndex = utils.inRange(activeIndex, itemsLength);
  var initialRoute = Math.abs(prevActiveIndex - activeIndex);
  var jumpForwardRoute = Math.abs(prevActiveIndex - itemsLength - activeIndex);
  var jumpBackwardRoute = Math.abs(prevActiveIndex + itemsLength - activeIndex);
  if (
    jumpBackwardRoute < jumpForwardRoute &&
    jumpBackwardRoute < initialRoute
  ) {
    return activeIndexOffsetMemory - itemsLength;
  }
  if (jumpForwardRoute < jumpBackwardRoute && jumpForwardRoute < initialRoute) {
    return activeIndexOffsetMemory + itemsLength;
  }
  return activeIndexOffsetMemory;
}
export function clearGalleryItems(items, galleryItems) {
  var clear = function (list) {
    return utils
      .uniqueBy(list, "idx")
      .filter(function (item) {
        return item.idx !== undefined;
      })
      .sort(function (a, b) {
        return a.idx - b.idx;
      });
  };
  var clearedGalleryItems = clear(galleryItems);
  return clearedGalleryItems.map(function (item) {
    var realItem = items.find(function (clearedItem) {
      return clearedItem.id === item.id;
    });
    return {
      item: realItem,
      thumbnailItem: item,
      idx: item.idx,
    };
  });
}
export function getThumbnailsData(_a) {
  var options = _a.options,
    activeIndex = _a.activeIndex,
    items = _a.items,
    thumbnailAlignment = _a.thumbnailAlignment,
    galleryStructure = _a.galleryStructure,
    containerWidth = _a.containerWidth,
    containerHeight = _a.containerHeight,
    _b = _a.activeIndexOffsetMemory,
    activeIndexOffsetMemory = _b === void 0 ? activeIndex : _b,
    _c = _a.prevActiveIndex,
    prevActiveIndex = _c === void 0 ? activeIndex : _c;
  var galleryItems = clearGalleryItems(items, galleryStructure.galleryItems);
  activeIndexOffsetMemory = calculateActiveIndexOffset({
    activeIndex: activeIndex,
    activeIndexOffsetMemory: activeIndexOffsetMemory,
    items: galleryItems,
    prevActiveIndex: prevActiveIndex,
  });
  var activeIndexWithOffset = activeIndexOffsetMemory + activeIndex;
  var thumbnailSize = options.thumbnailSize,
    isRTL = options.isRTL,
    thumbnailSpacings = options.thumbnailSpacings;
  if (utils.isVerbose()) {
    console.log("creating thumbnails for idx", activeIndex);
  }
  var withInfiniteScroll = false; // this is not supported yet
  var thumbnailSizeWithSpacing = thumbnailSize + thumbnailSpacings * 2;
  var horizontalThumbnails =
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.BOTTOM ||
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.TOP;
  var _d = getThumbnailsContainerSize({
      horizontalThumbnails: horizontalThumbnails,
      containerWidth: containerWidth,
      containerHeight: containerHeight,
      thumbnailSizeWithSpacing: thumbnailSizeWithSpacing,
    }),
    width = _d.width,
    height = _d.height;
  var minNumOfThumbnails = getNumberOfThumbnails({
    width: width,
    height: height,
    horizontalThumbnails: horizontalThumbnails,
  });
  var numberOfThumbnails =
    minNumOfThumbnails % 2 === 1 ? minNumOfThumbnails : minNumOfThumbnails + 1;
  var thumbnailsInEachSide = (numberOfThumbnails - 1) / 2;
  var itemRangeStart = activeIndexWithOffset - thumbnailsInEachSide;
  var itemRangeEnd = itemRangeStart + numberOfThumbnails;
  var itemToDisplay = withInfiniteScroll
    ? utils.sliceArrayWithRange(galleryItems, itemRangeStart, itemRangeEnd)
    : utils.sliceArrayIfAvailable(galleryItems, itemRangeStart, itemRangeEnd);
  var thumbnailsStyle = getThumbnailsStyles({
    horizontalThumbnails: horizontalThumbnails,
    width: width,
    height: height,
    thumbnailSizeWithSpacing: thumbnailSizeWithSpacing,
    activeIndex: activeIndexWithOffset,
  });
  var thumbnailsStyleWithRTLCalc = isRTL
    ? __assign(__assign({}, thumbnailsStyle), {
        left: undefined,
        top: undefined,
        right: thumbnailsStyle.left,
        bottom: thumbnailsStyle.top,
      })
    : thumbnailsStyle;
  var thumbnailsMargins = getThumbnailsContainerMargin({
    thumbnailAlignment: thumbnailAlignment,
    thumbnailSpacings: thumbnailSpacings,
  });
  return {
    items: itemToDisplay.map(function (_a, index) {
      var item = _a.item,
        thumbnailItem = _a.thumbnailItem,
        idx = _a.idx;
      var offset = index + itemToDisplay[0].idx;
      return {
        thumbnailItem: thumbnailItem,
        item: item,
        location: getThumbnailLocation({
          thumbnailAlignment: thumbnailAlignment,
          offset: offset,
          isRTL: isRTL,
          thumbnailSizeWithSpacing: thumbnailSizeWithSpacing,
        }),
        idx: idx,
      };
    }),
    thumbnailsMargins: thumbnailsMargins,
    horizontalThumbnails: horizontalThumbnails,
    thumbnailsStyle: thumbnailsStyleWithRTLCalc,
    activeIndexOffsetMemory: activeIndexOffsetMemory,
  };
}
function getThumbnailsContainerSize(_a) {
  var horizontalThumbnails = _a.horizontalThumbnails,
    containerWidth = _a.containerWidth,
    containerHeight = _a.containerHeight,
    thumbnailSizeWithSpacing = _a.thumbnailSizeWithSpacing;
  if (horizontalThumbnails) {
    return {
      width: containerWidth,
      height: thumbnailSizeWithSpacing,
    };
  } else {
    return {
      width: thumbnailSizeWithSpacing,
      height: containerHeight,
    };
  }
}
function getNumberOfThumbnails(_a) {
  var width = _a.width,
    height = _a.height,
    horizontalThumbnails = _a.horizontalThumbnails;
  if (horizontalThumbnails) {
    return Math.ceil(width / height);
  } else {
    return Math.ceil(height / width);
  }
}
function getThumbnailsStyles(_a) {
  var _b;
  var horizontalThumbnails = _a.horizontalThumbnails,
    width = _a.width,
    height = _a.height,
    activeIndex = _a.activeIndex,
    thumbnailSizeWithSpacing = _a.thumbnailSizeWithSpacing;
  var baseStyle = {
    overflow: "visible",
    width: width,
    height: height,
  };
  var size = horizontalThumbnails ? width : height;
  var unit = horizontalThumbnails ? "left" : "top";
  var distance = thumbnailSizeWithSpacing * activeIndex;
  var initialCenter = size / 2 - thumbnailSizeWithSpacing / 2;
  return __assign(
    __assign({}, baseStyle),
    ((_b = {}),
    (_b[unit] = distance < initialCenter ? 0 : initialCenter - distance),
    _b)
  );
}
function getThumbnailsContainerMargin(_a) {
  var thumbnailAlignment = _a.thumbnailAlignment,
    thumbnailSpacings = _a.thumbnailSpacings;
  var horizontalThumbnails =
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.BOTTOM ||
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.TOP;
  if (horizontalThumbnails) {
    var isTop = thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.TOP;
    return {
      marginTop: isTop ? 0 : thumbnailSpacings,
      marginBottom: isTop ? thumbnailSpacings : 0,
    };
  }
  var isLeft = thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.LEFT;
  return {
    marginLeft: isLeft ? 0 : thumbnailSpacings,
    marginRight: isLeft ? thumbnailSpacings : 0,
  };
}
function getThumbnailLocation(_a) {
  var _b, _c;
  var thumbnailAlignment = _a.thumbnailAlignment,
    thumbnailSizeWithSpacing = _a.thumbnailSizeWithSpacing,
    offset = _a.offset,
    isRTL = _a.isRTL;
  var horizontalThumbnails =
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.BOTTOM ||
    thumbnailAlignment === GALLERY_CONSTS.thumbnailsAlignment.TOP;
  var offsetSize = offset * thumbnailSizeWithSpacing;
  if (horizontalThumbnails) {
    return (_b = {}), (_b[isRTL ? "right" : "left"] = offsetSize), _b;
  }
  return (_c = {}), (_c[isRTL ? "bottom" : "top"] = offsetSize), _c;
}
//# sourceMappingURL=thumbnailsLogic.js.map
