import { flattenObject } from "pro-gallery-lib";
export function nativePGCreateGetOptionsFunc(options) {
  var baseOptions = flattenObject(options);
  var mainFunc =
    "(galleryEle) => {\n        const computedStyle = window.getComputedStyle(galleryEle);\n        const computedStyles = {};\n        // search css variables to query\n        const cssVariables = [];\n        const stylesheets = document.styleSheets;\n        for (let i = 0; i < stylesheets.length; i++) {\n            try {\n                const rules = stylesheets[i].rules || stylesheets[i].cssRules;\n                for (let j = 0; j < rules.length; j++) {\n                    const rule = rules[j];\n                    const style = rule.style;\n                    if (style) {\n                        for (let k = 0; k < style.length; k++) {\n                            const prop = style[k];\n                            if (prop.startsWith('--')) {\n                                if (prop.includes('ProGallery-')) {\n                                    cssVariables.push(prop);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (e) {\n            }\n        }\n        const cssVariablesMap = cssVariables.map((item) => {\n            return {\n                name: item,\n                value: computedStyle.getPropertyValue(item),\n            }\n        }).filter((item) => item.value);\n        // get computed styles\n        for (let i = 0; i < cssVariablesMap.length; i++) {\n            computedStyles[cssVariablesMap[i].name] = cssVariablesMap[i].value;\n        }\n        const options = Object.entries(computedStyles).reduce((res, [key, value]) => {\n            const keyNameStart = key.indexOf('ProGallery-') + 'ProGallery-'.length;\n            const keyName = key.substring(keyNameStart);\n            res[keyName] = JSON.parse(value);\n            return res;\n        }, {});\n        const optionsStr = Object.entries({...".concat(
      JSON.stringify(baseOptions),
      ",...options})\n        .map(([key, value]) => ([key, JSON.stringify(value)]))\n        .filter(([key, value]) => key.includes('layoutParams_'))\n        .map((keyval) => keyval.join(\":\")).join('|');\n        return optionsStr;\n    }"
    );
  return "(ele) => {\n        const mainFunc = ".concat(
    mainFunc,
    ";\n        return mainFunc(ele);\n    }"
  );
}
//# sourceMappingURL=extreact-style-params.js.map
