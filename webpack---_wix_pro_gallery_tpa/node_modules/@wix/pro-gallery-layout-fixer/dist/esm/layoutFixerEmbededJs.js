import { nativePGCreateGetOptionsFunc } from "./extreact-style-params";
import { requiredOptions } from "./v4layoutRelevantOptions";
import { filterOptions, hashToInt } from "./utils";
export function getServerParams(props) {
  var items = props.items,
    _a = props.rawOptions,
    rawOptions = _a === void 0 ? props.options : _a,
    useNativeLayoutFixer = props.useNativeLayoutFixer,
    customCreateGetOptionsFunc = props.customCreateGetOptionsFunc;
  var itemsStr = items
    .slice(0, 20)
    .map(function (item) {
      return ""
        .concat(hashToInt(item.mediaUrl), "_")
        .concat(item.width || item.metaData.width, "_")
        .concat(item.height || item.metaData.height);
    })
    .join("|");
  if (useNativeLayoutFixer) {
    var getOptions =
      typeof customCreateGetOptionsFunc === "function"
        ? customCreateGetOptionsFunc(rawOptions)
        : nativePGCreateGetOptionsFunc(rawOptions);
    var hrefStr =
      "/_serverless/pro-gallery-native-layout-fixer/layoutCssNative?id="
        .concat(props.id, "&items=")
        .concat(itemsStr, "&container=");
    return { hrefStr: hrefStr, getOptions: getOptions };
  } else {
    var options = Object.entries(filterOptions(rawOptions, requiredOptions))
      .map(function (keyVal) {
        return keyVal.join(":");
      })
      .join("|");
    var hrefStr = "/_serverless/pro-gallery-css-v4-server/layoutCss?ver=2&id="
      .concat(props.id, "&items=")
      .concat(itemsStr, "&container=");
    return {
      hrefStr: hrefStr,
      getOptions: "() => ".concat(JSON.stringify(options)),
    };
  }
}
export function createSsrJs(props) {
  var useNativeLayoutFixer = props.useNativeLayoutFixer;
  var _a = getServerParams(props),
    hrefStr = _a.hrefStr,
    getOptions = _a.getOptions;
  var embed = function (content) {
    return "\n  "
      .concat(
        content,
        "\n  var isVertical = options.includes('layoutParams_structure_scrollDirection:\"VERTICAL\"');\n  var layoutFixerUrl =  '"
      )
      .concat(
        hrefStr,
        "' + pgMeasures.top + '_' + pgMeasures.width + '_' + pgMeasures.height + '_' + window.innerHeight + '&options=' + options;\n  document.getElementById('"
      )
      .concat(
        "layout-fixer-style-" + props.id,
        "').setAttribute('href', encodeURI(layoutFixerUrl));\n});\n\n  "
      );
  };
  if (useNativeLayoutFixer) {
    return embed(
      '\n      var ele = document.getElementById("'
        .concat(
          props.id,
          '"), nativeRect = ele.getBoundingClientRect();\n      var pgMeasures = {top: nativeRect.top, width: nativeRect.width, height: Number(getComputedStyle(ele).getPropertyValue("height").replace("px", ""))};\n      var options = ('
        )
        .concat(getOptions, ")(ele);\n    ")
    );
  } else {
    return embed(
      "\n      var ele = document.getElementById('"
        .concat(
          "pro-gallery-" + props.id,
          "');\n      var pgMeasures = ele.getBoundingClientRect();\n      var options = ("
        )
        .concat(getOptions, ")(ele);\n    ")
    );
  }
}
//# sourceMappingURL=layoutFixerEmbededJs.js.map
