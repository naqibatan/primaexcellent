export const isIterable = (value) =>
  value !== null && Symbol.iterator in Object(value);
export const toArray = function (obj) {
  if (obj === void 0) {
    obj = [];
  }
  return isIterable(obj) && typeof obj !== "string"
    ? Array.from(obj)
    : obj === null
    ? []
    : [obj];
};

/**
 * union arrays
 * Cahnged to a better implementation from here https://stackoverflow.com/a/27664971
 */
export const unionArrays = function () {
  return Array.from(new Set([].concat(...arguments)));
};
export const omit = (obj, keys) =>
  Object.fromEntries(
    Object.entries(obj).filter((_ref) => {
      let [key] = _ref;
      return !keys.includes(key);
    })
  );
//# sourceMappingURL=arrays-and-objects.js.map
