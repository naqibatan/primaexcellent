export const createElement = (_ref) => {
  let {
    tagName,
    className,
    dataHook,
    id,
    alt,
    attributes,
    innerHtml,
    innerText,
    ariaLabel,
    ariaLabelledBy,
    ariaDescribedBy,
    role,
  } = _ref;
  let element = document.createElement(tagName);
  if (innerHtml) {
    const div = document.createElement("div");
    div.innerHTML = innerHtml;
    element = div.firstElementChild;
  }
  if (className) {
    element.className = className;
  }
  if (id) {
    element.id = id;
  }
  if (attributes) {
    Object.keys(attributes).forEach((attr) => {
      element.setAttribute(attr, attributes[attr]);
    });
  }
  if (innerText) {
    element.innerText = innerText;
  }
  if (dataHook) {
    element.setAttribute("data-hook", dataHook);
  }
  if (ariaLabel) {
    element.setAttribute("aria-label", ariaLabel);
  }
  if (ariaLabelledBy) {
    element.setAttribute("aria-labelledby", ariaLabelledBy);
  }
  if (ariaDescribedBy) {
    element.setAttribute("aria-describedby", ariaDescribedBy);
  }
  if (alt) {
    element.setAttribute("alt", alt);
  }
  if (role) {
    element.setAttribute("role", role);
  }
  return element;
};
export const classNames = (classesObject) => {
  let className = "";
  Object.keys(classesObject).forEach((clz) => {
    if (classesObject[clz]) {
      className = !className ? clz : className + " " + clz;
    }
  });
  return className;
};
export function renderComponent(component, target) {
  if (target === void 0) {
    target = document.body;
  }
  component.htmlElement = component.render().element;
  target.appendChild(component.htmlElement);
  if (!component.rendered) {
    return new Promise((resolve) => setTimeout(resolve, 10)).then(() => {
      component.componentRendered();
      component.rendered = true;
    });
  }
  component.onComponentUpdate();
  return Promise.resolve();
}
//# sourceMappingURL=utils.js.map
