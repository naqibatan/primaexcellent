import { DEFAULT_POLICY } from "../../types";
import { getConsentPolicy } from "../consent-policy-manager/consent-policy-manager";
import { componentSettingsService } from "../component-settings/component-settings-service";
import { getInitialSettings } from "./get-initial-settings";
import { translationKeys } from "../../constants/constants";
const storeListeners = [];
let store = {
  policySubmitted: false,
  configuration: [
    {
      titleKey: translationKeys.advancedCategoryEssentialHeadline,
      descriptionKey: translationKeys.advancedCategoryEssentialParagraph,
      toggleEnabled: false,
      toggleTooltip: translationKeys.essentialTooltip,
      policyKeys: ["essential"],
    },
    {
      titleKey: translationKeys.advancedCategoryMarketingHeadline,
      descriptionKey: translationKeys.advancedCategoryMarketingParagraph,
      toggleEnabled: true,
      policyKeys: ["advertising"],
    },
    {
      titleKey: translationKeys.advancedCategoryFunctionalHeadline,
      descriptionKey: translationKeys.advancedCategoryFunctionalParagraph,
      toggleEnabled: true,
      policyKeys: ["functional"],
    },
    {
      titleKey: translationKeys.advancedCategoryAnalyticsHeadline,
      descriptionKey: translationKeys.advancedCategoryAnalyticsParagraph,
      toggleEnabled: true,
      policyKeys: ["analytics"],
    },
  ],
  translations: {},
  settings: getInitialSettings(),
  consentPolicy: DEFAULT_POLICY,
};
export const initStore = async function (preview) {
  if (preview === void 0) {
    preview = false;
  }
  const policyDetails = await getConsentPolicy();
  const { settings, translations } =
    await componentSettingsService.getSettingsAndTranslations(preview);
  store = {
    ...store,
    policySubmitted: !policyDetails.defaultPolicy,
    consentPolicy: {
      ...DEFAULT_POLICY,
      ...policyDetails.policy,
    },
    settings,
    translations,
    createdPolicyTimestamp: policyDetails.createdDate,
  };
  return getStore();
};
export const updateStore = (storeUpdate) => {
  store = {
    ...store,
    ...storeUpdate,
  };
  storeListeners.forEach((func) => func(store));
};
const addStoreListener = (callback) => {
  storeListeners.push(callback);
};
export const getStore = () => {
  return {
    ...store,
    addStoreListener,
  };
};
//# sourceMappingURL=configuration-store.js.map
