import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { classNames, renderComponent } from "../../utils/utils";
import { BaseComponent, Theme } from "../../types";
import css from "./settings.scss";
import { Button, Section, Span, Text, View } from "../elements";
import { SectionComponent } from "../section/section.component";
import { CloseButton } from "../close-button";
import { translate } from "../../services/i18n/i18n";
import { getStore } from "../../services/configuration/configuration-store";
import { savePolicy } from "../../services/consent-policy-manager/consent-policy-manager";
import { translationKeys } from "../../constants/constants";
import { logger } from "../../services/bi-logger/bi-logger-service";
export class SettingsComponent extends BaseComponent {
  constructor(props) {
    super(props);
    _defineProperty(this, "backgroundView", void 0);
    _defineProperty(this, "closing", false);
    _defineProperty(this, "onSaveClicked", () => {
      logger.onSettingsChanged(
        JSON.stringify(this.state.startConsentPolicy),
        JSON.stringify(this.state.consentPolicy)
      );
      void savePolicy({
        policy: this.state.consentPolicy,
        successCallback: this.onSaveSuccessful,
        errorCallback: this.onSaveFailed,
      });
    });
    _defineProperty(this, "onSaveSuccessful", () => {
      this.closeDialog();
    });
    _defineProperty(this, "onSaveFailed", () => {});
    _defineProperty(this, "closeDialog", () => {
      this.closing = true;
      document.body.className =
        "" + document.body.className.replace(css.bodyPreventScrolling, "");
      this.htmlElement.className = this.getComponentClasses(false);
      this.backgroundView.ontransitionend = this.onCloseTransitionEnd;
    });
    _defineProperty(this, "onCloseTransitionEnd", () => {
      if (!this.closing) {
        return;
      }
      const parent = this.htmlElement.parentElement;
      if (parent) {
        var _this$state$lastActiv;
        parent.removeChild(this.htmlElement);
        (_this$state$lastActiv = this.state.lastActiveElement) == null
          ? void 0
          : _this$state$lastActiv.focus();
      }
      this.backgroundView.ontransitionend = null;
    });
    _defineProperty(this, "getComponentClasses", (show) => {
      return classNames({
        [css.root]: true,
        [css.show]: show,
      });
    });
    _defineProperty(this, "onToggleChanged", (policyKeys) => {
      const newState = {
        consentPolicy: this.state.consentPolicy,
        startConsentPolicy: this.state.startConsentPolicy,
      };
      policyKeys.forEach(
        (policy) =>
          (newState.consentPolicy[policy] = !this.state.consentPolicy[policy])
      );
      this.setState(newState);
    });
    this.setState({
      consentPolicy: {
        ...getStore().consentPolicy,
      },
      startConsentPolicy: {
        ...getStore().consentPolicy,
      },
    });
  }
  componentRendered() {
    document.body.className =
      document.body.className + " " + css.bodyPreventScrolling;
    this.showComponent();
    this.setState({
      lastActiveElement: document.activeElement,
    });
    this.htmlElement.focus();
  }
  onComponentUpdate() {
    this.showComponent();
  }
  showComponent() {
    this.backgroundView.onclick = this.closeDialog;
    this.htmlElement.className = this.getComponentClasses(true);
  }
  render() {
    const configs = getStore().configuration;
    const root = View({
      className: css.root,
      dataHook: settingsContainer,
    });
    root.onkeyup = (event) => {
      if (event.key === "Escape") {
        this.closeDialog();
      }
    };
    this.backgroundView = View({
      className: css.background,
    });
    const dialog = Section({
      className: css.dialog,
      dataHook: settingsDialog,
    });
    root.appendChild(this.backgroundView);
    const sections = Section({
      className: css.content,
    });
    const titleId = "settings.title.id";
    dialog.appendChild(
      Text({
        title: true,
        id: titleId,
        className: css.head,
        text: translate("settings.title"),
      })
    );
    const closeButtonContainer = Span({
      className: css.closeButtonContainer,
    });
    closeButtonContainer.appendChild(
      CloseButton({
        onClick: this.closeDialog,
        invert: false,
        ariaLabel: translate("close.settings.label"),
        color: "#000",
      })
    );
    dialog.appendChild(closeButtonContainer);
    configs.forEach((config) => {
      const toggleChecked = this.state.consentPolicy[config.policyKeys[0]];
      renderComponent(
        new SectionComponent({
          title: translate(config.titleKey),
          description: translate(config.descriptionKey),
          onToggleChanged: this.onToggleChanged,
          toggleTooltip: config.toggleTooltip
            ? translate(config.toggleTooltip)
            : undefined,
          toggleEnabled: config.toggleEnabled,
          policyKeys: config.policyKeys,
          toggleChecked,
        }),
        sections
      );
    });
    const footer = View({
      className: css.foot,
    });
    const saveButton = Button({
      dataHook: settingsSaveButton,
      className: css.button,
      text: translate(translationKeys.displaySaveDefault),
      onClick: this.onSaveClicked,
      theme: Theme.dark,
    });
    footer.appendChild(saveButton);
    dialog.appendChild(sections);
    root.appendChild(dialog);
    dialog.appendChild(footer);
    root.tabIndex = -1;
    root.setAttribute("aria-labelledby", titleId);
    root.setAttribute("role", "dialog");
    return {
      element: root,
    };
  }
}
const settingsContainer = "consent-banner-settings-container";
const settingsDialog = "consent-banner-settings-dialog";
const settingsSaveButton = "consent-banner-settings-save-button";
//# sourceMappingURL=settings.component.js.map
