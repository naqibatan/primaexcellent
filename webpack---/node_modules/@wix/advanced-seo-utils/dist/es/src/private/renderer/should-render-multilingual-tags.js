import { hasType } from "../tags/filters/filter-payload-without-velo";
import { CONTEXT_PROPS } from "../types/ContextProps";
import {
  isMultilingualType,
  skipMultilingualTagsForTpaPageId,
} from "../types/MultilingualTypes";
import { TAG_TYPES } from "../types/TagTypes";
import { isIndexable } from "./is-indexable";
export var shouldRenderMultilingualTags = function (_a) {
  var tags = _a.tags,
    itemType = _a.itemType,
    _b = _a.hasMultilingualData,
    hasMultilingualData = _b === void 0 ? false : _b,
    veloOverrides = _a.veloOverrides,
    context = _a.context;
  var href = context[CONTEXT_PROPS.DEFAULT_URL];
  var tpaPageId = context[CONTEXT_PROPS.TPA_PAGE_ID];
  var veloTags =
    (veloOverrides === null || veloOverrides === void 0
      ? void 0
      : veloOverrides.tags) || [];
  return (
    !skipMultilingualTagsForTpaPageId(itemType, tpaPageId) &&
    isMultilingualType(itemType) &&
    !hasMultilingualData &&
    !hasType(veloTags, TAG_TYPES.LINK) &&
    isIndexable({ tags: tags, href: href })
  );
};
