(self.webpackJsonp__wix_thunderbolt_app =
  self.webpackJsonp__wix_thunderbolt_app || []).push([
  [6121],
  {
    90506: function (e, t, i) {
      e.exports = i(85629);
    },
    85629: function (e, t) {
      !(function (e) {
        "use strict";
        e.stringify = function e(t) {
          function i(e) {
            return /[^\w-.]/.test(e)
              ? e.replace(/[^\w-.]/g, function (e) {
                  return "$" === e
                    ? "!"
                    : (e = e.charCodeAt(0)) < 256
                    ? "*" + ("00" + e.toString(16)).slice(-2)
                    : "**" + ("0000" + e.toString(16)).slice(-4);
                })
              : e;
          }
          var o;
          switch (typeof t) {
            case "number":
              return isFinite(t) ? "~" + t : "~null";
            case "boolean":
              return "~" + t;
            case "string":
              return "~'" + i(t);
            case "object":
              if (!t) return "~null";
              if (((o = []), Array.isArray(t))) {
                for (var a = 0; a < t.length; a++) o[a] = e(t[a]) || "~null";
                return "~(" + (o.join("") || "~") + ")";
              }
              for (var n in t)
                if (t.hasOwnProperty(n)) {
                  var s = e(t[n]);
                  s && o.push(i(n) + s);
                }
              return "~(" + o.join("~") + ")";
            default:
              return;
          }
        };
        var t = { true: !0, false: !1, null: null };
        (e.parse = function (e) {
          if (!e) return e;
          e = e.replace(/%(25)*27/g, "'");
          var i = 0,
            o = e.length;
          function a(t) {
            if (e.charAt(i) !== t)
              throw new Error(
                "bad JSURL syntax: expected " +
                  t +
                  ", got " +
                  (e && e.charAt(i))
              );
            i++;
          }
          function n() {
            for (
              var t, a = i, n = "";
              i < o && "~" !== (t = e.charAt(i)) && ")" !== t;

            )
              switch (t) {
                case "*":
                  a < i && (n += e.substring(a, i)),
                    "*" === e.charAt(i + 1)
                      ? ((n += String.fromCharCode(
                          parseInt(e.substring(i + 2, i + 6), 16)
                        )),
                        (a = i += 6))
                      : ((n += String.fromCharCode(
                          parseInt(e.substring(i + 1, i + 3), 16)
                        )),
                        (a = i += 3));
                  break;
                case "!":
                  a < i && (n += e.substring(a, i)), (n += "$"), (a = ++i);
                  break;
                default:
                  i++;
              }
            return n + e.substring(a, i);
          }
          return (function s() {
            var r, l, c;
            switch ((a("~"), (l = e.charAt(i)))) {
              case "(":
                if ((i++, "~" === e.charAt(i)))
                  if (((r = []), ")" === e.charAt(i + 1))) i++;
                  else
                    do {
                      r.push(s());
                    } while ("~" === e.charAt(i));
                else if (((r = {}), ")" !== e.charAt(i)))
                  do {
                    r[n()] = s();
                  } while ("~" === e.charAt(i) && ++i);
                a(")");
                break;
              case "'":
                i++, (r = n());
                break;
              default:
                for (c = i++; i < o && /[^)~]/.test(e.charAt(i)); ) i++;
                var u = e.substring(c, i);
                if (/[\d\-]/.test(l)) r = parseFloat(u);
                else if (void 0 === (r = t[u]))
                  throw new Error("bad value keyword: " + u);
            }
            return r;
          })();
        }),
          (e.tryParse = function (t, i) {
            try {
              return e.parse(t);
            } catch (e) {
              return i;
            }
          });
      })(t);
    },
    25707: function (e, t, i) {
      "use strict";
      i.r(t),
        i.d(t, {
          AUTH_RESULT_REASON: function () {
            return P.$9;
          },
          BIEvents: function () {
            return L;
          },
          INTERACTIONS: function () {
            return P.SE;
          },
          PrivacyStatus: function () {
            return we.iY;
          },
          PrivacyStatusStatus: function () {
            return _;
          },
          Role: function () {
            return N;
          },
          SiteMembersApiSymbol: function () {
            return I.n9;
          },
          Status: function () {
            return O;
          },
          isLoginAcceptableError: function () {
            return A.Y2;
          },
          isSignupAcceptableError: function () {
            return A.fJ;
          },
          memberDetailsFromDTO: function () {
            return A.Ky;
          },
          page: function () {
            return qe;
          },
          site: function () {
            return We;
          },
        });
      var o = i(56510),
        a = i(25259),
        n = i(14439),
        s = i(21980),
        r = i(55437),
        l = i(53891),
        c = i(54164),
        u = i(2922),
        d = i(24888),
        g = i(89534),
        m = i(74365),
        p = i(52192),
        h = i(61885),
        v = i(31619),
        S = i(75471),
        b = i(51978),
        E = i(42933),
        C = i(51968),
        f = i(90506),
        w = i.n(f);
      var y = i(18037),
        P = i(6504),
        I = i(50997);
      class D {
        constructor(e, t, i, o, a) {
          (this.propsStore = e),
            (this.structureApi = t),
            (this.siteScrollBlocker = i),
            (this.browserWindow = o),
            (this.cyclicTabbing = a),
            (this.prevCompIds = []);
        }
        async displayDialog(e, t, i, o = {}, a) {
          const n = async () => {
              (0, p.yF)(this.browserWindow) ||
                (this.activeElementBeforeShowDialog =
                  this.browserWindow.document.activeElement);
              const o = (0, y.uniqueId)(I.rj);
              this.propsStore.update({
                [o]: Object.assign(Object.assign({}, t), i),
              }),
                this.currentCompId &&
                  this.cyclicTabbing.disableCyclicTabbing(this.currentCompId),
                this.cyclicTabbing.enableCyclicTabbing(o),
                await this.structureApi.addComponentToDynamicStructure(o, {
                  componentType: e,
                  components: [],
                }),
                this.currentCompId &&
                  (a
                    ? this.prevCompIds.push(this.currentCompId)
                    : (this.structureApi.removeComponentFromDynamicStructure(
                        this.currentCompId
                      ),
                      this.siteScrollBlocker.setSiteScrollingBlocked(
                        !1,
                        this.currentCompId
                      ))),
                this.siteScrollBlocker.setSiteScrollingBlocked(!0, o),
                (this.currentCompId = o);
            },
            { shouldWaitForAppDidMount: s, registerToAppDidMount: r } = o;
          s && r ? r(n) : await n();
        }
        hideDialog() {
          var e;
          this.currentCompId &&
            (this.structureApi.removeComponentFromDynamicStructure(
              this.currentCompId
            ),
            this.siteScrollBlocker.setSiteScrollingBlocked(
              !1,
              this.currentCompId
            ),
            this.cyclicTabbing.disableCyclicTabbing(this.currentCompId),
            (this.currentCompId = this.prevCompIds.pop())),
            (0, p.yF)(this.browserWindow) ||
              (null === (e = this.activeElementBeforeShowDialog) ||
                void 0 === e ||
                e.focus(),
              (this.activeElementBeforeShowDialog = null));
        }
      }
      var _, O, N;
      !(function (e) {
        (e.UNKNOWN = "UNKNOWN"), (e.PRIVATE = "PRIVATE"), (e.PUBLIC = "PUBLIC");
      })(_ || (_ = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.PENDING = "PENDING"),
            (e.APPROVED = "APPROVED"),
            (e.BLOCKED = "BLOCKED"),
            (e.OFFLINE = "OFFLINE");
        })(O || (O = {})),
        (function (e) {
          (e.UNDEFINED_ROLE = "UNDEFINED_ROLE"),
            (e.MEMBER = "MEMBER"),
            (e.OWNER = "OWNER"),
            (e.CONTRIBUTOR = "CONTRIBUTOR");
        })(N || (N = {}));
      var A = i(13039),
        T = i(56334),
        R = i(22200);
      const L = ({
          sessionManager: e,
          businessLogger: t,
          wixBiSession: i,
          viewMode: o,
          language: a,
        }) => {
          const n = (t, n) => ({
            biToken: i.msId,
            context: t,
            ts: k(i),
            viewmode: o,
            visitor_id: e.getVisitorId(),
            site_member_id: e.getSiteMemberId(),
            vsi: i.viewerSessionId,
            site_settings_lng: a.siteLanguage,
            browser_lng: a.userLanguage,
            lng_mismatch: a.siteLanguage !== a.userLanguage,
            layout: n,
          });
          return {
            loginOrSignUpDialogLoaded: (e, i = "fullscreen") => {
              t.logger.log(Object.assign({ src: 5, evid: 658 }, n(e, i)), {
                endpoint: "site-members",
              });
            },
            closingDialog: (e, i = "fullscreen") => {
              t.logger.log(
                Object.assign(
                  { src: 5, evid: 602, form_type: "default" },
                  n(e, i)
                ),
                { endpoint: "site-members" }
              );
            },
            emailAuthSubmitClicked: (e, i) => {
              t.logger.log(
                Object.assign(
                  { src: 5, evid: 603, form_type: "default" },
                  n(e, i)
                ),
                { endpoint: "site-members" }
              );
            },
            siteMembersFeatureLoaded: () => {
              t.logger.log(Object.assign({ src: 5, evid: 698 }, n()), {
                endpoint: "site-members",
              });
            },
            siteMembersSdkFeatureLoaded: () => {
              t.logger.log(Object.assign({ src: 5, evid: 699 }, n()), {
                endpoint: "site-members",
              });
            },
            siteMembersEmailConfirmationNewMembersModalLoad: () => {
              t.logger.log(Object.assign({ src: 5, evid: 1809 }, n()), {
                endpoint: "site-members",
              });
            },
            siteMembersEmailConfirmationSendCodeClick: () => {
              t.logger.log(Object.assign({ src: 5, evid: 1810 }, n()), {
                endpoint: "site-members",
              });
            },
            siteMembersEmailConfirmationOnResendCodeClick: () => {
              t.logger.log(Object.assign({ src: 5, evid: 1811 }, n()), {
                endpoint: "site-members",
              });
            },
          };
        },
        k = (e) => {
          const t = e.initialTimestamp || 0;
          return Date.now() - t;
        },
        U = { isCloseable: !0, returnPages: !1 };
      class M {
        constructor(e, t) {
          (this.shouldRunCustomPopupCloseCallback = !0),
            (this.popups = e),
            (this.onReset = t),
            (this.config = U);
        }
        async openPopupPage(e, t) {
          var i;
          const o = this.shouldRunCustomPopupCloseCallback;
          this.preventCustomPopupCloseCallback(),
            await (null === (i = this.popups) || void 0 === i
              ? void 0
              : i.open(e, () => {
                  this.shouldRunCustomPopupCloseCallback &&
                    (this.rejectAuthenticationRequest(), t && t());
                })),
            (this.shouldRunCustomPopupCloseCallback = o);
        }
        preventCustomPopupCloseCallback() {
          this.shouldRunCustomPopupCloseCallback = !1;
        }
        allowCustomPopupCloseCallback() {
          this.shouldRunCustomPopupCloseCallback = !0;
        }
        assignRequestAuthenticationRejection(e) {
          this.requestAuthenticationRejectInstance =
            this.requestAuthenticationRejectInstance || e;
        }
        assignRequestAuthenticationResolveInstance(e) {
          this.requestAuthenticationResolveInstance =
            this.requestAuthenticationResolveInstance || e;
        }
        assignRequestAuthenticationPromise(e, t) {
          (this.requestAuthenticationRejectInstance =
            this.requestAuthenticationRejectInstance || t),
            (this.requestAuthenticationResolveInstance =
              this.requestAuthenticationResolveInstance || e);
        }
        rejectAuthenticationRequest() {
          this.requestAuthenticationRejectInstance &&
            (this.requestAuthenticationRejectInstance(P.$9.CANCELED),
            this.reset());
        }
        resolveAuthenticationRequest(e) {
          this.requestAuthenticationRejectInstance &&
            (this.requestAuthenticationResolveInstance(e), this.reset());
        }
        setConfig({ isCloseable: e = !0, returnPages: t = !1 }) {
          this.config = { isCloseable: e, returnPages: t };
        }
        reset() {
          var e;
          null === (e = this.onReset) || void 0 === e || e.call(this),
            (this.requestAuthenticationRejectInstance = void 0),
            (this.requestAuthenticationResolveInstance = void 0),
            (this.config = U);
        }
      }
      var V,
        B,
        F,
        G,
        j,
        x,
        $ = i(48511),
        W = i(26034),
        q = {},
        H = { memberPrivacySettings: "_memberPrivacySettings" },
        Y = { updatedDate: "google.protobuf.Timestamp" };
      function K(e) {
        return (0, $.Kk)(
          Object.assign(e, {
            domainToMappings: {
              "editor.wixapps.net": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "api._api_base_domain_": [
                { srcPath: "/members/v1/privacy-settings", destPath: "" },
              ],
              "manage._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "editor._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "blocks._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "create.editorx": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "www.wixapis.com": [
                {
                  srcPath: "/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              _: [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "www._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "*.dev.wix-code.com": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
              "bo._base_domain_": [
                {
                  srcPath: "/_api/members/v1/privacy-settings",
                  destPath: "/v1/privacy-settings",
                },
              ],
            },
          })
        );
      }
      function J(e) {
        var t = (0, W.G)(q, {}),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(H, { _memberPrivacySettings: Y }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.members.v1.member_privacy_settings",
            method: "GET",
            methodFqn:
              "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
            url: K({ protoPath: "/v1/privacy-settings", data: n, host: o }),
            params: (0, $.kI)(n),
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      (J.__isAmbassador = !0),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY"),
            (e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL");
        })(V || (V = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"), (e.NO_ONE = "NO_ONE"), (e.ANYONE = "ANYONE");
        })(B || (B = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.ENABLED = "ENABLED"),
            (e.DISABLED = "DISABLED"),
            (e.PENDING = "PENDING"),
            (e.DEMO = "DEMO");
        })(F || (F = {})),
        (function (e) {
          (e.OTHER = "OTHER"),
            (e.FROM_TEMPLATE = "FROM_TEMPLATE"),
            (e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER"),
            (e.DUPLICATE = "DUPLICATE"),
            (e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER"),
            (e.FLASH = "FLASH");
        })(G || (G = {})),
        (function (e) {
          (e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE"),
            (e.WIX = "WIX"),
            (e.SHOUT_OUT = "SHOUT_OUT"),
            (e.ALBUMS = "ALBUMS"),
            (e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE"),
            (e.HOTELS = "HOTELS"),
            (e.CLUBS = "CLUBS"),
            (e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT"),
            (e.DEV_SITE = "DEV_SITE"),
            (e.LOGOS = "LOGOS"),
            (e.VIDEO_MAKER = "VIDEO_MAKER"),
            (e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD"),
            (e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY"),
            (e.HTML_DRAFT = "HTML_DRAFT"),
            (e.SITELESS_BUSINESS = "SITELESS_BUSINESS"),
            (e.CREATOR_ECONOMY = "CREATOR_ECONOMY"),
            (e.DASHBOARD_FIRST = "DASHBOARD_FIRST"),
            (e.ANYWHERE = "ANYWHERE"),
            (e.HEADLESS = "HEADLESS"),
            (e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS"),
            (e.RISE = "RISE");
        })(j || (j = {})),
        (function (e) {
          (e.UNKNOWN = "UNKNOWN"),
            (e.TRASH = "TRASH"),
            (e.DELETED = "DELETED"),
            (e.PENDING_PURGE = "PENDING_PURGE");
        })(x || (x = {}));
      const z = (e) => {
          var t, i;
          const o =
              null === (t = e.joinCommunityCheckedByDefault) ||
              void 0 === t ||
              t,
            a =
              null !== (i = e.privacyNoteType) && void 0 !== i ? i : "CHECKBOX";
          return o ? a : "CHECKBOX";
        },
        X = (e) => {
          var t;
          return (
            "NOTE" === z(e) ||
            null === (t = e.joinCommunityCheckedByDefault) ||
            void 0 === t ||
            t
          );
        },
        Q = (e, t) => {
          let i;
          return {
            canHavePublicMembers: async () =>
              i ||
              ((i = new Promise(async (i) => {
                const o = await (async (e, t) => {
                  const { data: i } = await e.request(J({}), {
                    signedInstance: t,
                  });
                  return i.memberPrivacySettings;
                })(e, t());
                i((null == o ? void 0 : o.publicMemberCandidates) === B.ANYONE);
              })),
              i),
          };
        },
        Z = { [O.APPROVED]: "ACTIVE", [O.PENDING]: "PENDING" },
        ee = (e) => {
          var t;
          return e && null !== (t = Z[e]) && void 0 !== t ? t : "APPLICANT";
        };
      var te = i(52306),
        ie = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_commonListValue",
          mapValue: "_commonMapValue",
        },
        oe = { value: "_commonCustomValue" },
        ae = { value: "Map#_commonCustomValue" },
        ne = { value: "_customValue" },
        se = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_listValue",
          mapValue: "_mapValue",
        },
        re = {
          createdDate: "google.protobuf.Timestamp",
          updatedDate: "google.protobuf.Timestamp",
          identityProfile: "_identityProfile",
        },
        le = { customFields: "_customField" },
        ce = { value: "_customValue" },
        ue = {},
        de = { identity: "_identity", additionalData: "Map#_customValue" },
        ge = {},
        me = { value: "Map#_customValue" },
        pe = { identity: "_identity" },
        he = { profile: "_identityProfile" },
        ve = {
          identity: "_identity",
          additionalData: "Map#_commonCustomValue",
        };
      function Se(e) {
        return (0, $.Kk)(
          Object.assign(e, {
            domainToMappings: {
              _: [{ srcPath: "/_api/iam/authentication", destPath: "" }],
              "users._base_domain_": [
                {
                  srcPath: "/iam/wix/google",
                  destPath:
                    "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69",
                },
                { srcPath: "/authentication", destPath: "" },
              ],
              "www.wixapis.com": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "bo._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "dev._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
              "manage._base_domain_": [
                { srcPath: "/_api/authentication", destPath: "" },
              ],
              "www._base_domain_": [
                { srcPath: "/_api/iam/authentication", destPath: "" },
              ],
            },
          })
        );
      }
      function be(e) {
        var t = (0, W.G)(pe, {
            _customField: ne,
            _customValue: se,
            _identity: re,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(de, {
            _customField: ne,
            _customValue: se,
            _identity: re,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.iam.authentication.v1.authentication",
            method: "POST",
            methodFqn:
              "wix.iam.authentication.v1.AuthenticationService.Register",
            url: Se({ protoPath: "/v1/register", data: n, host: o }),
            data: n,
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      function Ee(e) {
        var t = (0, W.G)(ue, {}),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(de, {
            _customField: ne,
            _customValue: se,
            _identity: re,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.iam.authentication.v1.authentication",
            method: "POST",
            methodFqn: "wix.iam.authentication.v1.AuthenticationService.Login",
            url: Se({ protoPath: "/v1/login", data: n, host: o }),
            data: n,
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      function Ce(e) {
        var t = (0, W.G)(he, {
            _customField: ne,
            _customValue: se,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(ve, {
            _commonCustomValue: ie,
            _commonListValue: oe,
            _commonMapValue: ae,
            _customField: ne,
            _customValue: se,
            _identity: re,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.iam.authentication.v1.authentication",
            method: "POST",
            methodFqn:
              "wix.iam.authentication.v1.AuthenticationService.RegisterV2",
            url: Se({ protoPath: "/v2/register", data: n, host: o }),
            data: n,
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      function fe(e) {
        var t = (0, W.G)(ge, {}),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(ve, {
            _commonCustomValue: ie,
            _commonListValue: oe,
            _commonMapValue: ae,
            _customField: ne,
            _customValue: se,
            _identity: re,
            _identityProfile: le,
            _listValue: ce,
            _mapValue: me,
          }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.iam.authentication.v1.authentication",
            method: "POST",
            methodFqn:
              "wix.iam.authentication.v1.AuthenticationService.LoginV2",
            url: Se({ protoPath: "/v2/login", data: n, host: o }),
            data: n,
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      (be.__isAmbassador = !0),
        (Ee.__isAmbassador = !0),
        (Ce.__isAmbassador = !0),
        (fe.__isAmbassador = !0);
      var we = i(74880),
        ye = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_commonListValue",
          mapValue: "_commonMapValue",
        },
        Pe = { value: "_commonCustomValue" },
        Ie = { value: "Map#_commonCustomValue" },
        De = { value: "_customValue" },
        _e = {
          numValue: "DOUBLE",
          dateValue: "google.protobuf.Timestamp",
          listValue: "_listValue",
          mapValue: "_mapValue",
        },
        Oe = {
          createdDate: "google.protobuf.Timestamp",
          updatedDate: "google.protobuf.Timestamp",
          identityProfile: "_identityProfile",
        },
        Ne = { customFields: "_customField" },
        Ae = { value: "_customValue" },
        Te = { value: "Map#_customValue" },
        Re = {
          identity: "_identity",
          additionalData: "Map#_commonCustomValue",
        },
        Le = {};
      function ke(e) {
        return (0, $.Kk)(
          Object.assign(e, {
            domainToMappings: {
              "www.wixapis.com": [
                { srcPath: "/_api/iam/verification", destPath: "" },
              ],
              _: [{ srcPath: "/_api/iam/verification", destPath: "" }],
            },
          })
        );
      }
      function Ue(e) {
        var t = (0, W.G)(Le, {}),
          i = t.toJSON,
          o = t.fromJSON,
          a = (0, W.G)(Re, {
            _commonCustomValue: ye,
            _commonListValue: Pe,
            _commonMapValue: Ie,
            _customField: De,
            _customValue: _e,
            _identity: Oe,
            _identityProfile: Ne,
            _listValue: Ae,
            _mapValue: Te,
          }).fromJSON;
        function n(t) {
          var o = t.host,
            n = i(e);
          return {
            entityFqdn: "wix.iam.verification.v1.start_response",
            method: "POST",
            methodFqn:
              "wix.iam.verification.v1.VerificationService.VerifyDuringAuthentication",
            url: ke({ protoPath: "/v1/auth/verify", data: n, host: o }),
            data: n,
            transformResponse: a,
          };
        }
        return (n.fromReq = o), n;
      }
      Ue.__isAmbassador = !0;
      const Me = (e, t, i) => {
          (document.cookie = `${e}=;max-age=0`),
            (document.cookie = `${e}=;max-age=0;path=${t}`),
            (document.cookie = `${e}=;domain=${i};max-age=0`),
            (document.cookie = `${e}=;domain=${i};max-age=0;path=${t}`);
        },
        Ve = (0, o.ff)(
          [
            (0, o.t6)(a.R9, I.u2),
            (0, o.t6)(a.jC, I.u2),
            (0, o.t6)(a.Wf, I.u2),
            (0, o.t6)(a.z8, I.u2),
            n.U,
            s.EE,
            s.Zr,
            v.Xb,
            r.xP,
            r.QZ,
            s.bk,
            s.ZQ,
            S.F0,
            (0, o.jt)(b.x),
            S.Iz,
            l.$,
            c.sK,
            (0, o.jt)(E.cC),
            (0, o.jt)(C.I),
            u.jj,
            d.O,
            (0, o.jt)(g.C),
            (0, o.jt)(R.a),
            (0, o.jt)(T.I),
          ],
          (
            e,
            t,
            i,
            o,
            a,
            n,
            s,
            r,
            l,
            c,
            u,
            d,
            g,
            v,
            S,
            b,
            E,
            C,
            f = { trackEvent: () => 0 },
            I,
            _,
            O,
            T,
            R
          ) => {
            var k, U, V, B;
            const F = (0, m.O)(),
              {
                loginSocialBarOnSite: G,
                collectionExposure: j,
                protectedHomepage: x,
                smSessionCookie: $,
                memberInfoAppId: W,
                smcollectionId: q,
                isTemplate: H,
              } = e;
            let { sm_efCookie: Y } = e;
            const K = "WixInternal" === j,
              J = "22bef345-3c5b-4c18-b782-74d4085112ff",
              Z = r.getUserSession();
            let ie = r.getAppInstanceByAppDefId(J);
            const oe = () => (0, A.OP)(r),
              {
                smSettings: ae,
                tpaApplicationIds: ne,
                policyLinks: se,
                translations: re,
              } = t,
              le = W && ne[W],
              {
                metaSiteId: ce,
                externalBaseUrl: ue,
                siteId: de,
                siteRevision: ge,
              } = s.site,
              me = s.requestUrl,
              pe = s.viewMode,
              he =
                null !==
                  (U =
                    null === (k = s.anywhereConfig) || void 0 === k
                      ? void 0
                      : k.siteId) && void 0 !== U
                  ? U
                  : de,
              ve =
                null !==
                  (B =
                    null === (V = s.anywhereConfig) || void 0 === V
                      ? void 0
                      : V.revision) && void 0 !== B
                  ? B
                  : ge,
              Se =
                -1 !==
                P.F0.findIndex((e) => {
                  var t, i;
                  return null ===
                    (i =
                      null === (t = null == d ? void 0 : d.navigator) ||
                      void 0 === t
                        ? void 0
                        : t.userAgent) || void 0 === i
                    ? void 0
                    : i.includes(e);
                }),
              ye = !Se,
              Pe = !Se,
              Ie = `/_api/wix-sm-webapp/tokens/verify/${ce}/${he}`,
              De = `${ue.replace(
                /\/$/,
                ""
              )}/api/wix-sm/v1/authorize/${he}/pages`,
              _e = `/_api/wix-sm-webapp/tokens/logout/${ce}`,
              Oe = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${ce}&collectionId=${q}`,
              Ne = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${ce}&collectionId=${q}`,
              Ae = ae.smFirstDialogLogin ? "login" : "signup",
              {
                socialLoginFacebookEnabled: Te,
                socialLoginGoogleEnabled: Re,
                termsOfUse: Le,
                privacyPolicy: ke,
                codeOfConduct: Ve,
                customSignUpPageId: Be,
                customSignInPageId: Fe,
              } = ae,
              { privacyNoteType: Ge, joinCommunityCheckedByDefault: je } = ((
                e,
                t
              ) => {
                var i;
                return t["specs.thunderbolt.enableSignUpPrivacyNoteType"]
                  ? {
                      privacyNoteType: z(e),
                      joinCommunityCheckedByDefault: X(e),
                    }
                  : {
                      privacyNoteType: "CHECKBOX",
                      joinCommunityCheckedByDefault:
                        null === (i = e.joinCommunityCheckedByDefault) ||
                        void 0 === i ||
                        i,
                    };
              })(ae, _);
            let { smToken: xe } = e,
              $e = {},
              We = $,
              qe = null,
              He = !1;
            const Ye = (e) => {
                qe = e;
              },
              Ke = () => ({
                registerToAppDidMount: Ye,
                shouldWaitForAppDidMount: !He,
              }),
              Je = async () => {
                var e;
                if (_["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                  const { member: t } = await et(
                      "/_api/members/v1/members/my?fieldsets=FULL",
                      {
                        headers: {
                          authorization:
                            null !== (e = r.getAppInstanceByAppDefId(J)) &&
                            void 0 !== e
                              ? e
                              : "",
                        },
                      }
                    ),
                    { role: i } = await (0, A.Xh)(
                      () => {
                        var e;
                        return et(
                          `/api/wix-sm/v1/members/${
                            null == t ? void 0 : t.id
                          }/role`,
                          {
                            headers: {
                              authorization:
                                null !== (e = r.getAppInstanceByAppDefId(J)) &&
                                void 0 !== e
                                  ? e
                                  : "",
                            },
                          }
                        );
                      },
                      () => ({ role: N.MEMBER })
                    );
                  return (({ member: e, role: t }) => {
                    var i,
                      o,
                      a,
                      n,
                      s,
                      r,
                      l,
                      c,
                      u,
                      d,
                      g,
                      m,
                      p,
                      h,
                      v,
                      S,
                      b,
                      E,
                      C,
                      f,
                      w;
                    return {
                      id:
                        null !== (i = null == e ? void 0 : e.id) && void 0 !== i
                          ? i
                          : "",
                      contactId:
                        null !== (o = null == e ? void 0 : e.contactId) &&
                        void 0 !== o
                          ? o
                          : "",
                      loginEmail:
                        null !== (a = null == e ? void 0 : e.loginEmail) &&
                        void 0 !== a
                          ? a
                          : "",
                      imageUrl:
                        null !==
                          (r =
                            null ===
                              (s =
                                null === (n = null == e ? void 0 : e.profile) ||
                                void 0 === n
                                  ? void 0
                                  : n.photo) || void 0 === s
                              ? void 0
                              : s.url) && void 0 !== r
                          ? r
                          : "",
                      nickname:
                        null !==
                          (c =
                            null === (l = null == e ? void 0 : e.profile) ||
                            void 0 === l
                              ? void 0
                              : l.nickname) && void 0 !== c
                          ? c
                          : "",
                      profilePrivacyStatus:
                        null !== (u = null == e ? void 0 : e.privacyStatus) &&
                        void 0 !== u
                          ? u
                          : "",
                      slug:
                        null !==
                          (g =
                            null === (d = null == e ? void 0 : e.profile) ||
                            void 0 === d
                              ? void 0
                              : d.slug) && void 0 !== g
                          ? g
                          : "",
                      status: ee(null == e ? void 0 : e.status),
                      creationDate:
                        null !== (m = null == e ? void 0 : e.createdDate) &&
                        void 0 !== m
                          ? m
                          : "",
                      lastUpdateDate:
                        null !== (p = null == e ? void 0 : e.updatedDate) &&
                        void 0 !== p
                          ? p
                          : "",
                      lastLoginDate:
                        null !== (h = null == e ? void 0 : e.lastLoginDate) &&
                        void 0 !== h
                          ? h
                          : "",
                      emailVerified:
                        null !==
                          (v = null == e ? void 0 : e.loginEmailVerified) &&
                        void 0 !== v &&
                        v,
                      role: null != t ? t : "MEMBER",
                      owner: t === N.OWNER,
                      firstName:
                        null !==
                          (b =
                            null === (S = null == e ? void 0 : e.contact) ||
                            void 0 === S
                              ? void 0
                              : S.firstName) && void 0 !== b
                          ? b
                          : "",
                      lastName:
                        null !==
                          (C =
                            null === (E = null == e ? void 0 : e.contact) ||
                            void 0 === E
                              ? void 0
                              : E.lastName) && void 0 !== C
                          ? C
                          : "",
                      memberName: `${
                        null === (f = null == e ? void 0 : e.contact) ||
                        void 0 === f
                          ? void 0
                          : f.firstName
                      } ${
                        null === (w = null == e ? void 0 : e.contact) ||
                        void 0 === w
                          ? void 0
                          : w.lastName
                      }`,
                      groups: void 0,
                      emails: void 0,
                      phones: void 0,
                      addresses: void 0,
                      labels: void 0,
                      customFields: void 0,
                    };
                  })({ member: t, role: i });
                }
                const t = `/_api/wix-sm-webapp/member/${xe}?collectionId=${q}&metaSiteId=${ce}`,
                  { payload: i } = await et(t);
                return (0, A.Ky)(i);
              },
              ze = {},
              Xe = {},
              Qe = L({
                sessionManager: r,
                businessLogger: b,
                wixBiSession: E,
                viewMode: null == pe ? void 0 : pe.toUpperCase(),
                language: u,
              });
            Qe.siteMembersFeatureLoaded();
            const Ze = {},
              et = (0, A.Qn)(
                a,
                {
                  credentials: "same-origin",
                  headers: {
                    accept: "application/json",
                    "x-wix-site-revision": `${ve}`,
                    "x-wix-client-artifact-id": "thunderbolt",
                  },
                },
                me
              ),
              tt = (0, te.d)({ isSSR: !1 }),
              it = ((e, t, i) => {
                const { isCommunityInstalled: o } = t;
                return {
                  canHavePublicCommunity: async () =>
                    i["specs.thunderbolt.shouldUseMemberPrivacySettingsService"]
                      ? e.canHavePublicMembers()
                      : o,
                };
              })(
                Q(tt, () => (null != ie ? ie : "")),
                e,
                _
              ),
              ot = ((e, t, i, o, a) => new D(e, t, i, o, a))(l, c, v, d, T),
              at = new URL(me).searchParams,
              nt = {};
            at.forEach((e, t) => {
              nt[t] = e;
            });
            const st = ((e) => {
                var t;
                let { query: i } = e;
                const o =
                  null !=
                  (t = w().tryParse(
                    null == i ? void 0 : i.headlessExternalUrls,
                    {}
                  ))
                    ? t
                    : {};
                return null == o ? void 0 : o.headlessClientId;
              })({ query: nt }),
              rt = ((e, t, i, o, a, n) => {
                let s, r;
                const l =
                    "/_serverless/collection-settings-facade/get-settings",
                  c = async () =>
                    r ||
                    e(n ? `${l}?clientId=${n}` : l, {
                      headers: {
                        "Content-Type": "application/json",
                        authorization: a || "",
                      },
                    }).then((e) => ((r = e), r)),
                  u = async () =>
                    o["specs.thunderbolt.useIAMEnabledConnections"]
                      ? c().then((e) => e.collectionSettings)
                      : s ||
                        e("/_api/wix-sm-webapp/v1/collection/settings", {
                          headers: {
                            "Content-Type": "application/json",
                            authorization: a || "",
                          },
                        })
                          .then((e) => e.settings)
                          .then((e) => ((s = e), e));
                return {
                  getSiteMembersSettings: u,
                  getCaptchaSettings: () =>
                    u()
                      .then(A.B_)
                      .catch(
                        (e) => (
                          t.captureError(e, {
                            tags: { feature: "site-members" },
                          }),
                          i.trackEvent((0, P.RN)(P.eE.ACTIONS.SETTINGS.FAIL)),
                          {
                            invisible: { login: !1, signup: !1 },
                            visible: { login: !1, signup: !0 },
                          }
                        )
                      ),
                  getEnabledConnections: () =>
                    c().then((e) => {
                      var t;
                      return null !== (t = e.enabledConnections) && void 0 !== t
                        ? t
                        : [];
                    }),
                  getLoginRedirectUrl: () => c().then((e) => e.loginUrl),
                };
              })(et, n, f, _, ie, st),
              lt = (0, A.eL)(d),
              ct = (0, A.kY)(d, F),
              ut = new M(C, async () => {
                const e = await rt.getCaptchaSettings();
                (e.invisible.login || e.invisible.signup) &&
                  ct.hideCaptchaBadge();
              }),
              dt = null == R ? void 0 : R.getBsi(),
              gt = dt
                ? dt.split("|")[0]
                : "00000000-0000-0000-0000-000000000000",
              mt = (e) => {
                n.interactionStarted(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(e));
              },
              pt = {
                appDidMount() {
                  qe && qe(), (He = !0);
                },
                async login(e, t, i, o = !1, a, n = !1, s) {
                  var r, l, c, u, d, g, m, p, h, v, S;
                  try {
                    if (_["specs.thunderbolt.useNewRegisterLogin"])
                      return pt.newLogin(e, t, i, o, a, n, s);
                    const r = await rt.getCaptchaSettings();
                    if (
                      r.visible.login &&
                      !(null == i ? void 0 : i.recaptchaToken) &&
                      !(null == a ? void 0 : a.otp) &&
                      !(null == a ? void 0 : a.verificationId)
                    )
                      throw P.Xu;
                    f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT));
                    const l = await pt.performLogin(e, t, n, r, i, a),
                      c = await pt.handleLoginResponse(l, o);
                    return (
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS)), c
                    );
                  } catch (a) {
                    if (
                      ((0, A.Y2)(a) ||
                        f.trackEvent({
                          eventName: "CustomEvent",
                          params: {
                            eventCategory: "Site members",
                            eventAction: "Log in Failure",
                            eventLabel: "Wix",
                          },
                        }),
                      (null ===
                        (l =
                          null === (r = null == a ? void 0 : a.details) ||
                          void 0 === r
                            ? void 0
                            : r.applicationError) || void 0 === l
                        ? void 0
                        : l.code) === P.O1.WAITING_APPROVAL &&
                        pt.showAdminApprovalDialog(e),
                      (0, A.yQ)(a))
                    ) {
                      const r =
                          null ===
                            (d =
                              null ===
                                (u =
                                  null ===
                                    (c = null == a ? void 0 : a.details) ||
                                  void 0 === c
                                    ? void 0
                                    : c.applicationError) || void 0 === u
                                ? void 0
                                : u.data) || void 0 === d
                            ? void 0
                            : d.verificationId,
                        l =
                          null !==
                            (h =
                              null ===
                                (p =
                                  null ===
                                    (m =
                                      null ===
                                        (g = null == a ? void 0 : a.details) ||
                                      void 0 === g
                                        ? void 0
                                        : g.applicationError) || void 0 === m
                                    ? void 0
                                    : m.data) || void 0 === p
                                ? void 0
                                : p.verificationFailureReason) && void 0 !== h
                            ? h
                            : null ===
                                (S =
                                  null ===
                                    (v = null == a ? void 0 : a.details) ||
                                  void 0 === v
                                    ? void 0
                                    : v.applicationError) || void 0 === S
                            ? void 0
                            : S.code,
                        b = { email: e, verificationId: r, error: l };
                      return pt
                        .showVerificationCodeDialog(b)
                        .then((a) => {
                          const r = {
                            verificationId:
                              null == b ? void 0 : b.verificationId,
                            otp: a,
                          };
                          return pt.login(e, t, i, o, r, n, s).catch((e) => {
                            throw (n && pt.showLoginDialog(s, e), e);
                          });
                        })
                        .then((e) => (ot.hideDialog(), e));
                    }
                    throw a;
                  }
                },
                async performLogin(e, t, i, o, a, n) {
                  var s;
                  const r = null == C ? void 0 : C.getCurrentLightboxId(),
                    l =
                      null === (s = I.getCurrentRouteInfo()) || void 0 === s
                        ? void 0
                        : s.pageId,
                    c = i || (Fe && r && Fe === r) || (Fe && l && Fe === l),
                    u = o.invisible.login && c ? await lt(P.Ly.LOGIN) : void 0;
                  return (0, A.gb)(
                    !!_["specs.thunderbolt.useIAMPlatform"],
                    async () => {
                      var i, o;
                      const n = [];
                      (null == a ? void 0 : a.recaptchaToken) &&
                        n.push({
                          Recaptcha: null == a ? void 0 : a.recaptchaToken,
                        }),
                        u && n.push({ InvisibleRecaptcha: u });
                      const s = {
                          identifier: { email: e },
                          inputs: { password: t },
                          captcha_tokens: n,
                        },
                        r = _["specs.thunderbolt.iamOverAmbassador"]
                          ? await tt
                              .request(Ee(s), { signedInstance: ie || "" })
                              .then((e) => e.data)
                          : await et("/_api/iam/authentication/v1/login", {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                authorization: ie || "",
                              },
                              body: JSON.stringify(s),
                            });
                      return {
                        member: (0, A.T2)(r),
                        token: r.sessionToken,
                        pages: (0, A.AC)(
                          null === (i = r.additionalData) || void 0 === i
                            ? void 0
                            : i.protectedPages
                        ),
                        status:
                          null === (o = null == r ? void 0 : r.state) ||
                          void 0 === o
                            ? void 0
                            : o.status,
                      };
                    },
                    async () => {
                      var i;
                      const o = await et("/_api/wix-sm-webapp/v1/auth/login", {
                        method: "POST",
                        headers: {
                          "Content-Type": "application/json",
                          authorization: ie || "",
                        },
                        body: JSON.stringify({
                          email: e,
                          password: t,
                          recaptchaToken: null == a ? void 0 : a.recaptchaToken,
                          invisibleRecaptchaToken: u,
                          emailVerification: n,
                        }),
                      });
                      return {
                        member: o.member,
                        token:
                          null === (i = null == o ? void 0 : o.session) ||
                          void 0 === i
                            ? void 0
                            : i.token,
                      };
                    }
                  );
                },
                async handleOauthToken(e, t, i, o, a = !1) {
                  const s = r.getVisitorId();
                  n.interactionStarted(P.SE.SOCIAL_APP_LOGIN),
                    f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT, t));
                  try {
                    const { payload: r } = await et(Ne, {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        svSession: Z,
                        visitorId: s,
                        token: e,
                        provider: t,
                        mode: i,
                        lang: u.userLanguage,
                        privacyStatus: o,
                      }),
                    });
                    let l, c;
                    n.interactionEnded(P.SE.SOCIAL_APP_LOGIN),
                      n.interactionEnded(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(t)),
                      r.smSession &&
                        ((c = r.smSession.siteMemberDto),
                        (l = r.smSession.sessionToken)),
                      (c = r.siteMemberDto);
                    const g = (0, A.Ky)(c);
                    (0, A.kS)(d, me, {});
                    const m = await pt.handleLoginResponse(
                      { member: g, token: l },
                      a
                    );
                    return (
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS, t)), m
                    );
                  } catch (e) {
                    throw (
                      (f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.FAIL, t)), e)
                    );
                  }
                },
                async handleSocialLoginResponse(e, t, i = !1) {
                  var o;
                  const a = null !== (o = P.KG[t]) && void 0 !== o ? o : t;
                  n.interactionStarted(P.SE.SOCIAL_APP_LOGIN),
                    n.interactionEnded(P.SE.SOCIAL_APP_LOGIN),
                    n.interactionEnded(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(a)),
                    f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT, a));
                  const s = (0, A.yL)(e);
                  (0, A.kS)(d, me, {});
                  const r = await pt.handleLoginResponse(s, i);
                  return (
                    f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS, a)), r
                  );
                },
                async handleLoginResponse(
                  { token: e, member: t, pages: i, status: o },
                  a = !1
                ) {
                  const n = t.emailVerified;
                  if (!e && !n && "ACTIVE" === t.status)
                    return pt.showConfirmationEmailDialog(t.id);
                  if (!e || "REQUIRE_OWNER_APPROVAL" === o)
                    return pt.showAdminApprovalDialog(t.loginEmail);
                  (0, A.kS)(d, me, { sessionToken: e });
                  const s = await pt.applySessionToken(e, t, a && !i, !!i),
                    r = null != i ? i : s;
                  return Object.assign(
                    { sessionToken: e, member: t },
                    a ? { pages: r } : {}
                  );
                },
                async promptLogin(e, t, i) {
                  var o, a, n, s;
                  void 0 === e && (e = {}),
                    void 0 === t &&
                      (t =
                        null ===
                          (a =
                            null === (o = ut.config) || void 0 === o
                              ? void 0
                              : o.isCloseable) ||
                        void 0 === a ||
                        a),
                    void 0 === i &&
                      (i =
                        null !==
                          (s =
                            null === (n = ut.config) || void 0 === n
                              ? void 0
                              : n.returnPages) &&
                        void 0 !== s &&
                        s);
                  const { mode: r, modal: l } = e,
                    c = "login" === (null != r ? r : Ae),
                    d = l ? "popup" : "fullscreen";
                  return H
                    ? (await pt.showNotificationDialog(
                        re.templateNotificationTitle,
                        re.templateNotificationMessage,
                        re.containerOk
                      ),
                      Promise.reject(P.$9.CANCELED))
                    : (ct.loadScript(u.userLanguage, P.mz),
                      c
                        ? pt.showLoginDialog({
                            isCloseable: t,
                            displayMode: d,
                            returnPages: i,
                          })
                        : pt.showSignUpDialog({
                            isCloseable: t,
                            displayMode: d,
                            returnPages: i,
                          }));
                },
                promptForgotPassword(e = !0) {
                  return new Promise((t, i) => {
                    ut.assignRequestAuthenticationPromise(t, i);
                    const o = {
                        isCloseable: e,
                        directionByLanguage: u.directionByLanguage,
                        translations: re,
                      },
                      a = {
                        async onCloseDialogCallback() {
                          (0, A.CY)(me, d),
                            Qe.closingDialog("RequestResetPassword"),
                            ot.hideDialog(),
                            ut.rejectAuthenticationRequest();
                        },
                        onSubmitCallback(e) {
                          return pt.sendForgotPasswordMail(e).then(async () => {
                            const e = () => {
                              (0, A.CY)(me, d),
                                ut.resolveAuthenticationRequest(),
                                i(P.$9.CANCELED);
                            };
                            pt.showNotificationDialog(
                              re.resetPasswordCheckEmailTitle,
                              re.resetPasswordCheckEmailText,
                              re.resetPasswordOk,
                              e,
                              e
                            );
                          });
                        },
                      },
                      n = Ke();
                    ot.displayDialog("RequestPasswordResetDialog", o, a, n);
                  });
                },
                async requestAuthentication(e = {}) {
                  if (We)
                    return {
                      success: !0,
                      token: We,
                      reason: P.$9.ALREADY_LOGGED_IN,
                    };
                  try {
                    const t = !x,
                      { sessionToken: i } = await pt.promptLogin(e, t);
                    return { success: !0, token: i, reason: P.$9.SUCCESS };
                  } catch (e) {
                    return { success: !1, reason: e };
                  }
                },
                async requestAuthorizedPages(e = {}) {
                  if (xe) {
                    return {
                      success: !0,
                      pages: await pt.authorizeMemberPagesBySignedInstance(xe),
                    };
                  }
                  try {
                    const t = !x;
                    ut.setConfig({ isCloseable: t, returnPages: !0 });
                    const i = await pt.promptLogin(e, t, !0);
                    return ut.reset(), { success: !0, pages: i.pages };
                  } catch (e) {
                    return { success: !1, reason: e };
                  }
                },
                async applySessionToken(e, t, i = !1, a = !1) {
                  n.interactionStarted(P.SE.VERIFY_TOKEN);
                  const s = await (a
                    ? et(
                        `/_api/iam/cookie/v1/createSessionCookie?sessionToken=${e}`,
                        { method: "GET", headers: { authorization: ie || "" } }
                      )
                    : et(Ie, { method: "POST", body: `token=${e}` }));
                  var l;
                  if (
                    (n.interactionEnded(P.SE.VERIFY_TOKEN),
                    await r.loadNewSession({ reason: "memberLogin" }),
                    (ie = r.getAppInstanceByAppDefId(J)),
                    (xe = r.getSmToken()),
                    (We = e),
                    ($e = null != t ? t : await pt.getMemberDetails()),
                    await ((l = $e),
                    Promise.all(
                      Object.entries(ze).map(async ([e, t]) => {
                        try {
                          if (
                            "$$$timeout$$$" ===
                            (await Promise.race([
                              t(l),
                              (0, A._v)(3e3).then(() => "$$$timeout$$$"),
                            ]))
                          )
                            throw new Error(`callback ${e} timed out`);
                        } catch (e) {
                          n.captureError(e, {
                            tags: { feature: "site-members" },
                          });
                        }
                      })
                    )),
                    o.export({ memberDetails: $e }),
                    i)
                  )
                    return s.payload.pages;
                },
                async authorizeMemberPagesByCookie() {
                  const e = (0, p.yF)(d)
                      ? { headers: { cookie: `smSession=${$}` } }
                      : void 0,
                    { authorizedPages: t } = await et(De, e);
                  return t;
                },
                async authorizeMemberPagesByToken(e) {
                  if (e === $) return this.authorizeMemberPagesByCookie();
                  const { payload: t } = await et(Ie, {
                      method: "POST",
                      body: `token=${e}`,
                    }),
                    { pages: i } = t;
                  return i;
                },
                async authorizeMemberPagesBySignedInstance(e) {
                  const t = { headers: { authorization: e } },
                    { authorizedPages: i } = await et(De, t);
                  return i;
                },
                async getMemberDetails(e = !1) {
                  return $e.id && !e
                    ? $e
                    : xe
                    ? (($e = await Je()),
                      o.export({ memberDetails: $e }),
                      e &&
                        (await ((t = $e),
                        Promise.all(
                          Object.values(Ze).map(async (e) => {
                            try {
                              await e(t);
                            } catch (e) {
                              n.captureError(e, {
                                tags: { feature: "site-members" },
                              });
                            }
                          })
                        ))),
                      $e)
                    : null;
                  var t;
                },
                async register(e, t, i, o, a, s, r, l, c) {
                  var u, g, m, p, h, v, S, b, E, w;
                  s = null != s && s;
                  try {
                    if (_["specs.thunderbolt.useNewRegisterLogin"])
                      return pt.newRegister(e, t, i, o, a, s, r, l, c);
                    const g = await rt.getCaptchaSettings();
                    if (
                      g.visible.signup &&
                      "Enabled" !==
                        _["specs.ShouldPassCaptchaVerificationOnSignupSpec"] &&
                      !r &&
                      !(null == l ? void 0 : l.otp) &&
                      !(null == l ? void 0 : l.verificationId)
                    )
                      throw P.Xu;
                    n.interactionStarted(P.SE.CODE_SIGNUP),
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUBMIT));
                    const m = null == C ? void 0 : C.getCurrentLightboxId(),
                      p =
                        null === (u = I.getCurrentRouteInfo()) || void 0 === u
                          ? void 0
                          : u.pageId,
                      h = a || (Be && m && Be === m) || (Be && p && Be === p),
                      v =
                        g.invisible.signup && h
                          ? await lt(P.Ly.SIGNUP)
                          : void 0,
                      {
                        member: S,
                        sessionToken: b,
                        pages: E,
                        status: w,
                      } = await pt.performRegister(e, t, {
                        contactInfo: i,
                        profilePrivacyStatus: o,
                        isDefaultFlow: a,
                        recaptchaToken: r,
                        invisibleRecaptchaToken: v,
                        emailVerification: l,
                      }),
                      y = S.emailVerified,
                      D =
                        "ACTIVE" === (null == S ? void 0 : S.status)
                          ? "ACTIVE"
                          : "PENDING";
                    if (!b && !y && "ACTIVE" === S.status)
                      return (
                        n.interactionEnded(P.SE.CODE_SIGNUP),
                        pt.showConfirmationEmailDialog(S.id)
                      );
                    if (
                      (a && "APPLICANT" === (null == S ? void 0 : S.status)) ||
                      !b ||
                      "REQUIRE_OWNER_APPROVAL" === w
                    )
                      return (
                        n.interactionEnded(P.SE.CODE_SIGNUP),
                        pt.showAdminApprovalDialog(e)
                      );
                    (0, A.kS)(d, me, { sessionToken: b });
                    const O = await pt.applySessionToken(b, S, s && !E, !!E),
                      N = null != E ? E : O;
                    return (
                      n.interactionEnded(P.SE.CODE_SIGNUP),
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUCCESS)),
                      f.trackEvent({
                        eventName: "CompleteRegistration",
                        params: { origin: "Site members", method: "Wix" },
                      }),
                      Object.assign(
                        { member: S, status: D, sessionToken: b },
                        s && N ? { pages: N } : {}
                      )
                    );
                  } catch (l) {
                    if ((0, A.yQ)(l)) {
                      const n = await rt.getSiteMembersSettings(),
                        u =
                          null ===
                            (p =
                              null ===
                                (m =
                                  null ===
                                    (g = null == l ? void 0 : l.details) ||
                                  void 0 === g
                                    ? void 0
                                    : g.applicationError) || void 0 === m
                                ? void 0
                                : m.data) || void 0 === p
                            ? void 0
                            : p.verificationId,
                        d =
                          null !==
                            (b =
                              null ===
                                (S =
                                  null ===
                                    (v =
                                      null ===
                                        (h = null == l ? void 0 : l.details) ||
                                      void 0 === h
                                        ? void 0
                                        : h.applicationError) || void 0 === v
                                    ? void 0
                                    : v.data) || void 0 === S
                                ? void 0
                                : S.verificationFailureReason) && void 0 !== b
                            ? b
                            : null ===
                                (w =
                                  null ===
                                    (E = null == l ? void 0 : l.details) ||
                                  void 0 === E
                                    ? void 0
                                    : E.applicationError) || void 0 === w
                            ? void 0
                            : w.code,
                        C = { email: e, verificationId: u, error: d };
                      return pt
                        .showVerificationCodeDialog(C)
                        .then((l) => {
                          const u = {
                            verificationId:
                              null == C ? void 0 : C.verificationId,
                            otp: l,
                          };
                          return "DURING_SIGNUP" !== n.emailVerificationOption
                            ? pt
                                .login(e, t, { recaptchaToken: r }, s, u, a)
                                .then(
                                  (e) => {
                                    var t;
                                    const i =
                                      "ACTIVE" ===
                                      (null ===
                                        (t = null == e ? void 0 : e.member) ||
                                      void 0 === t
                                        ? void 0
                                        : t.status)
                                        ? "ACTIVE"
                                        : "PENDING";
                                    return Object.assign(Object.assign({}, e), {
                                      status: i,
                                    });
                                  },
                                  (e) => {
                                    throw (a && pt.showLoginDialog(c, e), e);
                                  }
                                )
                            : pt
                                .register(e, t, i, o, a, s, r, u, c)
                                .catch((e) => {
                                  throw (a && pt.showSignUpDialog(c, e), e);
                                });
                        })
                        .then((e) => (ot.hideDialog(), e));
                    }
                    throw (
                      ((0, A.fJ)(l)
                        ? n.interactionEnded(P.SE.CODE_SIGNUP)
                        : f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.FAIL)),
                      l)
                    );
                  }
                },
                async performRegister(
                  e,
                  t,
                  {
                    contactInfo: i,
                    profilePrivacyStatus: o,
                    isDefaultFlow: a,
                    recaptchaToken: n,
                    invisibleRecaptchaToken: s,
                    emailVerification: r,
                  } = {}
                ) {
                  return (0, A.gb)(
                    !!_["specs.thunderbolt.useIAMPlatform"],
                    async () => {
                      var a, r;
                      const l = {
                          identity: {
                            identifiers: [{ email: e }],
                            identityProfile: Object.assign(
                              Object.assign({}, (0, A.AO)(i || {})),
                              { privacyStatus: o }
                            ),
                          },
                          inputs: { password: t },
                          captcha_tokens: [
                            ...(n ? [{ Recaptcha: n }] : []),
                            ...(s ? [{ InvisibleRecaptcha: s }] : []),
                          ],
                        },
                        c = _["specs.thunderbolt.iamOverAmbassador"]
                          ? await tt
                              .request(be(l), { signedInstance: ie || "" })
                              .then((e) => e.data)
                          : await et("/_api/iam/authentication/v1/register", {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                                authorization: ie || "",
                              },
                              body: JSON.stringify(l),
                            });
                      return {
                        member: (0, A.T2)(c),
                        sessionToken: c.sessionToken,
                        pages: (0, A.AC)(
                          null === (a = c.additionalData) || void 0 === a
                            ? void 0
                            : a.protectedPages
                        ),
                        status:
                          null === (r = null == c ? void 0 : c.state) ||
                          void 0 === r
                            ? void 0
                            : r.status,
                      };
                    },
                    async () => {
                      const l = {
                          email: e,
                          password: t,
                          profilePrivacyStatus: o,
                          contactInfo: (0, A.t1)(i || {}),
                          defaultFlow: a,
                          recaptchaToken: n,
                          invisibleRecaptchaToken: s,
                          emailVerification: r,
                        },
                        { member: c, session: u } = await et(
                          "/_api/wix-sm-webapp/v1/auth/signup",
                          {
                            method: "POST",
                            headers: {
                              "Content-Type": "application/json",
                              authorization: ie || "",
                            },
                            body: JSON.stringify(l),
                          }
                        );
                      return {
                        member: c,
                        sessionToken: null == u ? void 0 : u.token,
                      };
                    }
                  );
                },
                async sendForgotPasswordMail(e) {
                  n.interactionStarted(P.SE.RESET_PASSWORD);
                  const t = u.userLanguage,
                    i = encodeURIComponent(me),
                    o = encodeURIComponent(e),
                    a = _["specs.thunderbolt.iamResetPasswordFlow"]
                      ? "/_api/iam/recovery/v1/send-email"
                      : "/_api/wix-sm-webapp/member/sendForgotPasswordMail",
                    s = _["specs.thunderbolt.iamResetPasswordFlow"]
                      ? JSON.stringify({
                          language: t,
                          email: e,
                          redirect: { url: me },
                        })
                      : `returnUrl=${i}&collectionId=${q}&metaSiteId=${ce}&lang=${t}&email=${o}`,
                    r = _["specs.thunderbolt.iamResetPasswordFlow"]
                      ? {
                          "Content-Type": "application/json",
                          authorization: ie || "",
                        }
                      : void 0;
                  await et(a, { headers: r, method: "POST", body: s }),
                    n.interactionEnded(P.SE.RESET_PASSWORD);
                },
                async sendSetPasswordEmail(e, t) {
                  const i = await et(
                    "/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email",
                    {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                        authorization: ie || "",
                      },
                      body: JSON.stringify(
                        Object.assign(
                          { email: e },
                          (null == t ? void 0 : t.hideIgnoreMessage)
                            ? { hideIgnoreMessage: t.hideIgnoreMessage }
                            : {}
                        )
                      ),
                    }
                  );
                  return !!(null == i ? void 0 : i.accepted);
                },
                async changePassword(e, t) {
                  const i = encodeURIComponent(e),
                    o = t.startsWith(P.nc),
                    a = o ? "/_api/iam/recovery/v1/recover" : Oe,
                    n = o
                      ? JSON.stringify({ password: e, recovery_token: t })
                      : `newPassword=${i}&forgotPasswordToken=${t}`,
                    s = o
                      ? {
                          "Content-Type": "application/json",
                          authorization: ie || "",
                        }
                      : void 0;
                  await et(a, { method: "POST", headers: s, body: n });
                },
                async resendEmailVerification(e) {
                  await et(`/_api/wix-sm-webapp/tokens/email/resend/${e}`);
                },
                async logout(e) {
                  if (xe) {
                    if (
                      (await et(_e, { method: "POST" }).catch(() => {
                        f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGOUT.FAIL));
                      }),
                      await Promise.all(
                        Object.entries(Xe).map(async ([e, t]) => {
                          try {
                            if (
                              "$$$timeout$$$" ===
                              (await Promise.race([
                                t(),
                                (0, A._v)(3e3).then(() => "$$$timeout$$$"),
                              ]))
                            )
                              throw new Error(`callback ${e} timed out`);
                          } catch (e) {
                            n.captureError(e, {
                              tags: { feature: "site-members" },
                            });
                          }
                        })
                      ),
                      e)
                    ) {
                      const t = `./${e.replace(/^\//, "")}`;
                      await g.navigate(t);
                    }
                    (0, p.yF)(d) || d.document.location.reload();
                  }
                },
                registerToUserLogin(e, t = (0, y.uniqueId)("callback")) {
                  return (ze[t] = e), t;
                },
                unRegisterToUserLogin(e) {
                  delete ze[e];
                },
                registerToMemberLogout(e) {
                  const t = (0, y.uniqueId)("logout_callback");
                  return (Xe[t] = e), t;
                },
                unRegisterToMemberLogout(e) {
                  delete Xe[e];
                },
                registerToMemberDetailsRefresh(e) {
                  const t = (0, y.uniqueId)("mdrcb");
                  return (Ze[t] = e), t;
                },
                unRegisterToMemberDetailsRefresh(e) {
                  delete Ze[e];
                },
                async showWelcomeDialog(e = !0) {
                  const t = { isCloseable: e, translations: re },
                    i = S.getParsedUrl(),
                    o = {
                      onCloseDialogCallback() {
                        (0, A.CY)(me, d), Qe.closingDialog("WelcomeDialog");
                        const e = new URL(me).hostname,
                          t = 0 === e.indexOf("www") ? e.substr(3) : e;
                        Me("sm_ef", "/", t),
                          (Y = ""),
                          ot.hideDialog(),
                          g.navigate(i.href);
                      },
                      onSubmitCallback() {
                        const e = new URL(me).hostname,
                          t = 0 === e.indexOf("www") ? e.substr(3) : e;
                        Me("sm_ef", "/", t),
                          (Y = ""),
                          ot.hideDialog(),
                          le && g.navigate("./account/my-account"),
                          g.navigate(i.href);
                      },
                    };
                  n.interactionStarted(P.SE.WELCOME_DIALOG),
                    n.interactionEnded(P.SE.WELCOME_DIALOG),
                    ot.displayDialog("WelcomeDialog", t, o);
                },
                async showNoPermissionsToPageDialog(e) {
                  const t = {
                    onCloseDialogCallback() {
                      (0, A.CY)(me, d), ot.hideDialog(), e && e();
                    },
                    onSwitchAccountLinkClick() {
                      pt.logout();
                    },
                  };
                  ot.displayDialog(
                    "NoPermissionsToPageDialog",
                    { translations: re },
                    t
                  );
                },
                async showResetPasswordDialog(e) {
                  const t = {
                      isCloseable: !0,
                      isTermsOfUseNeeded: !(
                        !(null == Le ? void 0 : Le.enabled) || !se.termsOfUse
                      ),
                      isPrivacyPolicyNeeded: !(
                        !(null == ke ? void 0 : ke.enabled) || !se.privacyPolicy
                      ),
                      termsOfUseLink: se.termsOfUse,
                      privacyPolicyLink: se.privacyPolicy,
                      directionByLanguage: u.directionByLanguage,
                      translations: re,
                    },
                    i = () => {
                      const e = S.getParsedUrl();
                      return (
                        e.searchParams.delete("forgotPasswordToken"),
                        e.searchParams.delete("forgotPasswordLang"),
                        S.pushUrlState(e),
                        e
                      );
                    },
                    o = {
                      onCloseDialogCallback() {
                        (0, A.CY)(me, d),
                          Qe.closingDialog("ResetPasswordDialog");
                        const e = i();
                        ot.hideDialog(), g.navigate(e.href);
                      },
                      async onSubmitCallback(o) {
                        try {
                          await pt.changePassword(o, e),
                            pt.showNotificationDialog(
                              re.resetPasswordSuccessTitle,
                              "",
                              re.containerOk,
                              async () => {
                                if (e.startsWith(P.nc)) {
                                  const e = new URL(me).searchParams.get(
                                    "redirectUrl"
                                  );
                                  if (e)
                                    return null == d
                                      ? void 0
                                      : d.location.replace(e);
                                }
                                const t = i();
                                await pt.showLoginDialog(), g.navigate(t.href);
                              }
                            );
                        } catch (e) {
                          const i = (0, A.zg)(e).toString();
                          if (
                            i !== P.O1.RESET_PASSWORD_TOKEN_EXPIRED &&
                            i !== P.O1.NEW_RESET_PASSWORD_TOKEN_EXPIRED
                          )
                            throw e;
                          pt.showNotificationDialog(
                            re.passwordHasExpiredTitle,
                            re.passwordHasExpiredText,
                            re.passwordHasExpiredOk,
                            () =>
                              pt
                                .promptForgotPassword(t.isCloseable)
                                .then(() => {
                                  const e = S.getParsedUrl();
                                  g.navigate(e.href);
                                })
                          );
                        }
                      },
                    };
                  ot.displayDialog("ResetPasswordDialog", t, o, Ke());
                },
                async showLoggedInResetPasswordDialog() {
                  const e = {
                      isCloseable: !0,
                      directionByLanguage: u.directionByLanguage,
                      translations: re,
                    },
                    t = {
                      onCloseDialogCallback() {
                        Qe.closingDialog("LoggedInResetPasswordDialog"),
                          ot.hideDialog();
                      },
                      async onSubmitCallback() {},
                    };
                  ot.displayDialog("LoggedInResetPasswordDialog", e, t, Ke());
                },
                async showLoginDialog(e = {}, t) {
                  const {
                      returnPages: i,
                      isCloseable: o,
                      displayMode: a,
                    } = Object.assign(
                      {
                        isCloseable: !0,
                        displayMode: "fullscreen",
                        returnPages: !1,
                      },
                      e
                    ),
                    s = await rt.getCaptchaSettings();
                  return (
                    ct.setCaptchaBadgeVisibility(s.invisible.login),
                    Fe && (null == C ? void 0 : C.isLightbox(Fe))
                      ? pt.showCustomAuthenticationDialog(Fe, i)
                      : new Promise(async (r, l) => {
                          ut.assignRequestAuthenticationPromise(r, l);
                          const c =
                              "Enabled" ===
                                _[
                                  "specs.ShouldForceCaptchaVerificationOnLoginSpec"
                                ] || s.visible.login,
                            [g, m] = (0, y.partition)(
                              await pt.getConnections(),
                              { appDefId: P.Ld.PASSWORD }
                            ),
                            p = await pt.getLoginUrl(),
                            v = {
                              bsi: gt,
                              displayMode: a,
                              language: u.userLanguage,
                              directionByLanguage: u.directionByLanguage,
                              isCloseable: o,
                              smCollectionId: q,
                              svSession: Z,
                              biVisitorId: oe(),
                              metaSiteId: ce,
                              isEmailLoginEnabled: g.length > 0,
                              idps: m,
                              shouldForceCaptchaVerification:
                                !s.invisible.login && c,
                              isSocialAuthSupported: ye,
                              serverError: t,
                              reportBi: b.reportBi,
                              translations: re,
                              externalBaseUrl: pt.getExternalBaseUrl(),
                              headlessRedirectUrl: p,
                            },
                            S = {
                              onCloseDialogCallback() {
                                (0, A.CY)(me, d),
                                  ot.hideDialog(),
                                  Qe.closingDialog("MemberLoginDialog", a),
                                  ut.rejectAuthenticationRequest();
                              },
                              submit(t, o, s) {
                                return (
                                  n.interactionStarted(P.SE.DEFAULT_LOGIN),
                                  Qe.emailAuthSubmitClicked(
                                    "MemberLoginDialog",
                                    a
                                  ),
                                  pt
                                    .login(t, o, s, i, void 0, !0, e)
                                    .then((e) => {
                                      n.interactionEnded(P.SE.DEFAULT_LOGIN),
                                        ot.hideDialog(),
                                        r(e);
                                    })
                                    .catch((e) => {
                                      throw (
                                        ((0, A.Y2)(e) &&
                                          n.interactionEnded(
                                            P.SE.DEFAULT_LOGIN
                                          ),
                                        e)
                                      );
                                    })
                                );
                              },
                              onForgetYourPasswordClick() {
                                pt.promptForgotPassword(o);
                              },
                              onSwitchDialogLinkClick() {
                                pt.showSignUpDialog({
                                  isCloseable: o,
                                  displayMode: a,
                                  returnPages: i,
                                }).then(r, () => {
                                  ut.rejectAuthenticationRequest();
                                });
                              },
                              async onTokenMessage(e, t, o = !1) {
                                let a;
                                return (
                                  (await it.canHavePublicCommunity()) &&
                                    (a = o ? "PUBLIC" : "PRIVATE"),
                                  pt
                                    .handleOauthToken(
                                      e,
                                      t,
                                      "memberLoginDialog",
                                      a,
                                      i
                                    )
                                    .then((e) => {
                                      ot.hideDialog(), r(e);
                                    })
                                );
                              },
                              onBackendSocialLogin(e, t) {
                                return pt
                                  .handleSocialLoginResponse(e, t, i)
                                  .then((e) => {
                                    ot.hideDialog(), r(e);
                                  });
                              },
                              getHostReadyPayload: () => ({
                                visitorId: oe(),
                                svSession: Z,
                              }),
                              openCaptcha: (0, h.yT)({
                                captcha: O,
                                userLanguage: u.userLanguage,
                              }),
                              reportSocialAuthStarted: mt,
                            };
                          Qe.loginOrSignUpDialogLoaded("MemberLoginDialog", a),
                            await ot.displayDialog(
                              "MemberLoginDialog",
                              v,
                              S,
                              Ke()
                            ),
                            pt.closeCustomAuthenticationDialogs(!0);
                        })
                  );
                },
                async showSignUpDialog(e = {}, t) {
                  const {
                      returnPages: i,
                      isCloseable: o,
                      displayMode: a,
                    } = Object.assign(
                      {
                        isCloseable: !0,
                        displayMode: "fullscreen",
                        returnPages: !1,
                      },
                      e
                    ),
                    s = await rt.getCaptchaSettings();
                  if (
                    (ct.setCaptchaBadgeVisibility(s.invisible.signup),
                    Be && (null == C ? void 0 : C.isLightbox(Be)))
                  )
                    return pt.showCustomAuthenticationDialog(Be, i);
                  const r =
                    "Enabled" !==
                      _["specs.ShouldPassCaptchaVerificationOnSignupSpec"] &&
                    "Enabled" ===
                      _["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                  return new Promise(async (l, c) => {
                    const g =
                        r ||
                        (s.visible.signup &&
                          "Enabled" !==
                            _[
                              "specs.ShouldPassCaptchaVerificationOnSignupSpec"
                            ]),
                      [m, p] = (0, y.partition)(await pt.getConnections(), {
                        appDefId: P.Ld.PASSWORD,
                      }),
                      v = await pt.getLoginUrl();
                    ut.assignRequestAuthenticationPromise(l, c);
                    const S = {
                        bsi: gt,
                        displayMode: a,
                        language: u.userLanguage,
                        directionByLanguage: u.directionByLanguage,
                        isCloseable: o,
                        smCollectionId: q,
                        biVisitorId: oe(),
                        svSession: Z,
                        metaSiteId: ce,
                        isSocialAuthSupported: ye,
                        isEmailLoginEnabled: m.length > 0,
                        idps: p,
                        isCommunityInstalled: await it.canHavePublicCommunity(),
                        privacyNoteType: Ge,
                        joinCommunityCheckedByDefault: je,
                        isTermsOfUseNeeded: !(
                          !(null == Le ? void 0 : Le.enabled) || !se.termsOfUse
                        ),
                        isPrivacyPolicyNeeded: !(
                          !(null == ke ? void 0 : ke.enabled) ||
                          !se.privacyPolicy
                        ),
                        isCodeOfConductNeeded: !(
                          !(null == Ve ? void 0 : Ve.enabled) ||
                          !se.codeOfConduct
                        ),
                        shouldForceCaptchaVerification:
                          !s.invisible.signup && g,
                        termsOfUseLink: se.termsOfUse,
                        privacyPolicyLink: se.privacyPolicy,
                        codeOfConductLink: se.codeOfConduct,
                        serverError: t,
                        reportBi: b.reportBi,
                        translations: re,
                        externalBaseUrl: pt.getExternalBaseUrl(),
                        headlessRedirectUrl: v,
                      },
                      E = {
                        onCloseDialogCallback() {
                          (0, A.CY)(me, d),
                            ot.hideDialog(),
                            Qe.closingDialog("SignUpDialog", a),
                            ut.rejectAuthenticationRequest();
                        },
                        async submit(t, o, s) {
                          let r;
                          if (await it.canHavePublicCommunity()) {
                            r = (
                              "boolean" == typeof s ? s : s.isCommunityChecked
                            )
                              ? we.iY.PUBLIC
                              : we.iY.PRIVATE;
                          }
                          const c =
                            "boolean" == typeof s || null == s
                              ? void 0
                              : s.recaptchaToken;
                          return (
                            n.interactionStarted(P.SE.DEFAULT_SIGNUP),
                            Qe.emailAuthSubmitClicked("SignUpDialog", a),
                            pt
                              .register(t, o, void 0, r, !0, i, c, void 0, e)
                              .then((e) => {
                                n.interactionEnded(P.SE.DEFAULT_SIGNUP);
                                const {
                                  member: t,
                                  sessionToken: o,
                                  pages: a,
                                } = e;
                                o &&
                                  (ot.hideDialog(),
                                  l(
                                    Object.assign(
                                      { member: t, sessionToken: o },
                                      i ? { pages: a } : {}
                                    )
                                  ));
                              })
                              .catch((e) => {
                                throw (
                                  ((0, A.fJ)(e) &&
                                    n.interactionEnded(P.SE.DEFAULT_SIGNUP),
                                  e)
                                );
                              })
                          );
                        },
                        onSwitchDialogLinkClick() {
                          pt.showLoginDialog({
                            isCloseable: o,
                            displayMode: a,
                            returnPages: i,
                          }).then(l, () => {
                            ut.rejectAuthenticationRequest();
                          });
                        },
                        async onTokenMessage(e, t, o = !1) {
                          let a;
                          return (
                            (await it.canHavePublicCommunity()) &&
                              (a = o ? "PUBLIC" : "PRIVATE"),
                            pt
                              .handleOauthToken(e, t, "memberLoginDialog", a, i)
                              .then((e) => {
                                ot.hideDialog(), l(e);
                              })
                          );
                        },
                        onBackendSocialLogin(e, t) {
                          return pt
                            .handleSocialLoginResponse(e, t, i)
                            .then((e) => {
                              ot.hideDialog(), l(e);
                            });
                        },
                        getHostReadyPayload: () => ({
                          visitorId: oe(),
                          svSession: Z,
                        }),
                        openCaptcha: (0, h.yT)({
                          captcha: O,
                          userLanguage: u.userLanguage,
                        }),
                        reportSocialAuthStarted: mt,
                      };
                    Qe.loginOrSignUpDialogLoaded("SignUpDialog", a),
                      await ot.displayDialog("SignUpDialog", S, E, Ke()),
                      pt.closeCustomAuthenticationDialogs(!0);
                  });
                },
                async hideAuthDialog() {
                  console.warn("hideAuthDialog is not supported");
                },
                async showNotificationDialog(
                  e,
                  t,
                  i,
                  o = () => 0,
                  a = () => 0
                ) {
                  const n = {
                      isCloseable: !0,
                      title: e,
                      description: t,
                      okButtonText: i,
                      translations: re,
                    },
                    s = {
                      onCloseDialogCallback() {
                        (0, A.CY)(me, d),
                          Qe.closingDialog("NotificationDialog"),
                          ot.hideDialog(),
                          a();
                      },
                      onOkButtonClick() {
                        ot.hideDialog(), o();
                      },
                    };
                  await ot.displayDialog("NotificationDialog", n, s);
                },
                async showConfirmationEmailDialog(e, t = !0) {
                  return new Promise((i, o) => {
                    const a = {
                        isCloseable: !0,
                        isSignUp: t,
                        translations: re,
                      },
                      n = {
                        onCloseDialogCallback() {
                          (0, A.CY)(me, d),
                            Qe.closingDialog("ConfirmationEmailDialog"),
                            ot.hideDialog(),
                            ut.rejectAuthenticationRequest(),
                            o(P.$9.CANCELED);
                        },
                        async onResendConfirmationEmail() {
                          await pt.resendEmailVerification(e),
                            await pt
                              .showConfirmationEmailDialog(e, !1)
                              .catch(o);
                        },
                      };
                    ot.displayDialog("ConfirmationEmailDialog", a, n);
                  });
                },
                async showAdminApprovalDialog(e) {
                  return new Promise((t, i) => {
                    const o = () => {
                      (0, A.kS)(d, me, { error: A.nA.ACCESS_DENIED }),
                        ut.rejectAuthenticationRequest(),
                        i(P.$9.CANCELED);
                    };
                    pt.showNotificationDialog(
                      "",
                      `${re.applySuccess1} ${re.applySuccess2}`.replace(
                        "{0}",
                        e
                      ),
                      re.containerOk,
                      o,
                      o
                    );
                  });
                },
                async showCustomAuthenticationDialog(e, t = !1) {
                  if (!C) throw new Error("popup unavailable");
                  return new Promise(async (i, o) => {
                    ut.assignRequestAuthenticationPromise(i, o);
                    const a = pt.registerToUserLogin(async () => {
                      ut.resolveAuthenticationRequest(
                        Object.assign(
                          { member: $e, sessionToken: We },
                          t
                            ? {
                                pages:
                                  await pt.authorizeMemberPagesBySignedInstance(
                                    xe
                                  ),
                              }
                            : {}
                        )
                      ),
                        pt.unRegisterToUserLogin(a),
                        C.getCurrentLightboxId() === e && C.close();
                    }, "customAuthCbId");
                    await ut.openPopupPage(e, () => {
                      pt.unRegisterToUserLogin(a);
                    }),
                      ot.hideDialog();
                  });
                },
                async closeCustomAuthenticationDialogs(e = !1) {
                  const t = null == C ? void 0 : C.getCurrentLightboxId();
                  t &&
                    [Be, Fe].includes(t) &&
                    (e && ut.preventCustomPopupCloseCallback(),
                    await C.close(),
                    ut.allowCustomPopupCloseCallback());
                },
                getForgotPasswordToken() {
                  return new URL(
                    (0, p.yF)(d) ? me : d.location.href
                  ).searchParams.get("forgotPasswordToken");
                },
                shouldDisplayWelcomeDialog() {
                  return Y && le;
                },
                async showVerificationCodeDialog(e) {
                  return new Promise(async (t, i) => {
                    var o, a;
                    n.interactionStarted(P.SE.VERIFICATION_CODE),
                      Qe.siteMembersEmailConfirmationNewMembersModalLoad(),
                      ut.assignRequestAuthenticationPromise(t, i);
                    const s = {
                        language: u.userLanguage,
                        directionByLanguage: u.directionByLanguage,
                        isCloseable:
                          null ===
                            (a =
                              null === (o = ut.config) || void 0 === o
                                ? void 0
                                : o.isCloseable) ||
                          void 0 === a ||
                          a,
                        displayMode: "customPopup",
                        email: null == e ? void 0 : e.email,
                        error: null == e ? void 0 : e.error,
                        translations: re,
                      },
                      r = {
                        onResendVerificationCodeEmail() {
                          Qe.siteMembersEmailConfirmationOnResendCodeClick(),
                            t(null);
                        },
                        onCloseDialogCallback() {
                          Qe.closingDialog("VerificationCode"),
                            (0, A.CY)(me, d),
                            ot.hideDialog(),
                            ut.rejectAuthenticationRequest(),
                            i(P.$9.CANCELED);
                        },
                        onSubmitCallback(e) {
                          Qe.siteMembersEmailConfirmationSendCodeClick(), t(e);
                        },
                      };
                    n.interactionEnded(P.SE.VERIFICATION_CODE),
                      ot.displayDialog(
                        "VerificationCodeDialog",
                        s,
                        r,
                        void 0,
                        !0
                      );
                  });
                },
                async appWillMount() {
                  G && (await pt.getMemberDetails());
                  switch (
                    new URL(s.requestUrl).searchParams.get("showDialog")
                  ) {
                    case "MemberLoginDialog":
                      pt.showLoginDialog();
                      break;
                    case "SignUpDialog":
                      pt.showSignUpDialog();
                      break;
                    case "RequestPasswordResetDialog":
                      pt.promptForgotPassword();
                      break;
                    case "ResetPasswordDialog":
                      pt.showResetPasswordDialog("faketoken");
                      break;
                    case "LoggedInResetPasswordDialog":
                      pt.showLoggedInResetPasswordDialog();
                      break;
                    case "WelcomeDialog":
                      pt.showWelcomeDialog();
                      break;
                    case "NoPermissionsToPageDialog":
                      pt.showNoPermissionsToPageDialog();
                      break;
                    case "NotificationDialog":
                      pt.showNotificationDialog("title", "description", "ok");
                      break;
                    case "ConfirmationEmailDialog":
                      pt.showConfirmationEmailDialog("fakemember");
                      break;
                    case "VerificationCodeDialog":
                      pt.showVerificationCodeDialog({
                        email: "testEmail@test.com",
                      });
                  }
                },
                pageWillUnmount({ pageId: e }) {
                  [Be, Fe].includes(e) || ot.hideDialog();
                },
                getSocialAuthComponentProps() {
                  return (0, A.IO)({
                    config: e,
                    viewerModel: s,
                    sessionManager: r,
                    bsiManager: R,
                    handleOauthToken: pt.handleOauthToken,
                    handleSocialLoginResponse: pt.handleSocialLoginResponse,
                    isSocialAuthSupported: Pe,
                    captcha: O,
                    userLanguage: u.userLanguage,
                    reportBi: b.reportBi,
                    reportSocialAuthStarted: mt,
                    useNewSocialFlow:
                      !!_["specs.thunderbolt.ShouldUseNewIAMSocialFlow"],
                    translations: re,
                  });
                },
                async getConnections() {
                  if (_["specs.thunderbolt.useIAMEnabledConnections"])
                    return rt
                      .getEnabledConnections()
                      .then((e) =>
                        e.map(({ id: e, appDefId: t, displayName: i }) => ({
                          id: e,
                          appDefId: t,
                          name: i,
                        }))
                      );
                  const e = new URL(me).searchParams.get("idpConnectionId");
                  return [
                    ...(K
                      ? []
                      : [
                          {
                            id: P.Ld.PASSWORD,
                            appDefId: P.Ld.PASSWORD,
                            name: "Password",
                          },
                        ]),
                    ...(Re
                      ? [
                          {
                            id: P.Ld.GOOGLE,
                            appDefId: P.Ld.GOOGLE,
                            name: "Google",
                          },
                        ]
                      : []),
                    ...(Te && !K
                      ? [
                          {
                            id: P.Ld.FACEBOOK,
                            appDefId: P.Ld.FACEBOOK,
                            name: "Facebook",
                          },
                        ]
                      : []),
                    ...(e ? [{ id: e, appDefId: e, name: "SSO" }] : []),
                  ];
                },
                getLoginUrl() {
                  if (
                    st &&
                    _["specs.thunderbolt.shouldFetchLoginUrlByClientId"]
                  )
                    return rt.getLoginRedirectUrl();
                },
                getExternalBaseUrl() {
                  return _["specs.thunderbolt.shouldUseExternalBaseUrl"]
                    ? ue
                    : void 0;
                },
                async newRegister(e, t, i, o, a, s, r, l, c) {
                  var u, g, m, p;
                  s = null != s && s;
                  try {
                    const c = await rt.getCaptchaSettings();
                    if (
                      c.visible.signup &&
                      "Enabled" !==
                        _["specs.ShouldPassCaptchaVerificationOnSignupSpec"] &&
                      !r &&
                      !(null == l ? void 0 : l.otp) &&
                      !(null == l ? void 0 : l.verificationId)
                    )
                      throw P.Xu;
                    n.interactionStarted(P.SE.CODE_SIGNUP),
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUBMIT));
                    const h = null == C ? void 0 : C.getCurrentLightboxId(),
                      v =
                        null === (u = I.getCurrentRouteInfo()) || void 0 === u
                          ? void 0
                          : u.pageId,
                      S = a || (Be && h && Be === h) || (Be && v && Be === v),
                      b =
                        c.invisible.signup && S
                          ? await lt(P.Ly.SIGNUP)
                          : void 0,
                      E = {
                        profile: Object.assign(
                          Object.assign({}, (0, A.AO)(i || {})),
                          { privacyStatus: o, emails: [e] }
                        ),
                        loginId: { email: e },
                        password: t,
                        captchaTokens: [
                          ...(r ? [{ Recaptcha: r }] : []),
                          ...(b ? [{ InvisibleRecaptcha: b }] : []),
                        ],
                      },
                      w = await tt
                        .request(Ce(E), { signedInstance: ie || "" })
                        .then((e) => e.data),
                      y = await pt.getStateMachine(w, e),
                      D =
                        null === (g = null == y ? void 0 : y.additionalData) ||
                        void 0 === g
                          ? void 0
                          : g.protectedPages,
                      O = (0, A.AC)(D),
                      N = (0, A.aB)(y);
                    (0, A.kS)(d, me, {
                      sessionToken: null == y ? void 0 : y.sessionToken,
                    });
                    const T = await pt.applySessionToken(
                        null == y ? void 0 : y.sessionToken,
                        N,
                        s && !O,
                        !0
                      ),
                      R = null != O ? O : T;
                    n.interactionEnded(P.SE.CODE_SIGNUP),
                      f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUCCESS)),
                      f.trackEvent({
                        eventName: "CompleteRegistration",
                        params: { origin: "Site members", method: "Wix" },
                      });
                    const L = null == y ? void 0 : y.sessionToken,
                      k =
                        null ===
                          (p =
                            null === (m = null == y ? void 0 : y.identity) ||
                            void 0 === m
                              ? void 0
                              : m.status) || void 0 === p
                          ? void 0
                          : p.name;
                    return Object.assign(
                      { member: N, status: k, sessionToken: L },
                      s && R ? { pages: R } : {}
                    );
                  } catch (e) {
                    if (a) throw (pt.showSignUpDialog(c, e), e);
                    throw (
                      ((0, A.fJ)(e)
                        ? n.interactionEnded(P.SE.CODE_SIGNUP)
                        : f.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.FAIL)),
                      e)
                    );
                  }
                },
                async getStateMachine(e, t) {
                  const i = null == e ? void 0 : e.state;
                  return (
                    n.interactionEnded(P.SE.CODE_SIGNUP),
                    i === we.Yk.REQUIRE_OWNER_APPROVAL
                      ? (n.interactionEnded(P.SE.CODE_SIGNUP),
                        pt.showAdminApprovalDialog(t))
                      : i === we.Yk.REQUIRE_EMAIL_VERIFICATION
                      ? pt
                          .verifyEmailVerification(
                            t,
                            null == e ? void 0 : e.stateToken
                          )
                          .then((e) => pt.getStateMachine(e, t))
                      : e
                  );
                },
                async verifyEmailVerification(e, t, i) {
                  var o, a, n;
                  try {
                    const o = {
                      stateToken: t || "",
                      code:
                        null != i
                          ? i
                          : await pt.showVerificationCodeDialog({ email: e }),
                    };
                    return (
                      await tt.request(Ue(o), { signedInstance: ie || "" })
                    ).data;
                  } catch (i) {
                    const s = {
                      email: e,
                      verificationId: "",
                      error:
                        null !==
                          (n =
                            null ===
                              (a =
                                null === (o = null == i ? void 0 : i.details) ||
                                void 0 === o
                                  ? void 0
                                  : o.applicationError) || void 0 === a
                              ? void 0
                              : a.code) && void 0 !== n
                          ? n
                          : "BAD_CODE",
                    };
                    return (
                      await pt.showVerificationCodeDialog(s),
                      pt.verifyEmailVerification(e, t)
                    );
                  }
                },
                async newLogin(e, t, i, o = !1, a, n = !1, s) {
                  var r, l, c, u;
                  try {
                    const s = await rt.getCaptchaSettings();
                    if (
                      s.visible.login &&
                      !(null == i ? void 0 : i.recaptchaToken) &&
                      !(null == a ? void 0 : a.otp) &&
                      !(null == a ? void 0 : a.verificationId)
                    )
                      throw P.Xu;
                    f.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT));
                    const c = null == C ? void 0 : C.getCurrentLightboxId(),
                      u =
                        null === (r = I.getCurrentRouteInfo()) || void 0 === r
                          ? void 0
                          : r.pageId,
                      g = n || (Fe && c && Fe === c) || (Fe && u && Fe === u),
                      m =
                        s.invisible.login && g ? await lt(P.Ly.LOGIN) : void 0,
                      p = [];
                    (null == i ? void 0 : i.recaptchaToken) &&
                      p.push({
                        Recaptcha: null == i ? void 0 : i.recaptchaToken,
                      }),
                      m && p.push({ InvisibleRecaptcha: m });
                    const h = {
                        loginId: { email: e },
                        password: t,
                        captcha_tokens: p,
                      },
                      v = await tt
                        .request(fe(h), { signedInstance: ie || "" })
                        .then((e) => e.data),
                      S = await pt.getStateMachine(v, e),
                      b =
                        null === (l = null == S ? void 0 : S.additionalData) ||
                        void 0 === l
                          ? void 0
                          : l.protectedPages,
                      E = (0, A.AC)(b),
                      w = (0, A.aB)(S);
                    (0, A.kS)(d, me, {
                      sessionToken: null == S ? void 0 : S.sessionToken,
                    });
                    const y = await pt.applySessionToken(
                        null == S ? void 0 : S.sessionToken,
                        w,
                        o && !E,
                        !0
                      ),
                      D = null != E ? E : y,
                      _ = null == S ? void 0 : S.sessionToken;
                    return Object.assign(
                      { sessionToken: _, member: w },
                      o ? { pages: D } : {}
                    );
                  } catch (t) {
                    if (n) throw (pt.showLoginDialog(s, t), t);
                    throw (
                      ((0, A.Y2)(t) ||
                        f.trackEvent({
                          eventName: "CustomEvent",
                          params: {
                            eventCategory: "Site members",
                            eventAction: "Log in Failure",
                            eventLabel: "Wix",
                          },
                        }),
                      (null ===
                        (u =
                          null === (c = null == t ? void 0 : t.details) ||
                          void 0 === c
                            ? void 0
                            : c.applicationError) || void 0 === u
                        ? void 0
                        : u.code) === P.O1.WAITING_APPROVAL &&
                        pt.showAdminApprovalDialog(e),
                      t)
                    );
                  }
                },
              };
            return (
              o.export({
                promptLogin: pt.promptLogin,
                logout: pt.logout,
                memberDetails: $e,
              }),
              i.update(() => ({
                shouldShowRenderingBlockingDialogs: () =>
                  !(
                    !pt.getForgotPasswordToken() &&
                    !pt.shouldDisplayWelcomeDialog()
                  ),
                showRenderingBlockingDialogs: () => {
                  const e = pt.getForgotPasswordToken();
                  return e
                    ? pt.showResetPasswordDialog(e)
                    : pt.shouldDisplayWelcomeDialog()
                    ? pt.showWelcomeDialog()
                    : void 0;
                },
              })),
              pt
            );
          }
        );
      var Be = i(13487),
        Fe = i(46450),
        Ge = i(11986);
      const je = (0, o.ff)([I.n9], (e) => ({
          getTpaHandlers() {
            const t = async (t, i, o) => {
                var a, n, s;
                const r = await e.getMemberDetails(!0);
                return r
                  ? (
                      null === (a = o.appClientSpecMapData) || void 0 === a
                        ? void 0
                        : a.isWixTPA
                    )
                    ? {
                        attributes: {
                          firstName:
                            null !== (n = r.firstName) && void 0 !== n ? n : "",
                          lastName:
                            null !== (s = r.lastName) && void 0 !== s ? s : "",
                          privacyStatus: r.profilePrivacyStatus,
                        },
                        name: r.memberName,
                        email: r.loginEmail,
                        id: r.id,
                        owner: r.owner,
                        status: r.status,
                      }
                    : { id: r.id, owner: r.owner, status: r.status }
                  : null;
              },
              i = async (t, i = {}) => {
                var o, a;
                const { member: n } = await e.promptLogin({
                  mode: i.mode,
                  modal: i.modal,
                });
                return {
                  attributes: {
                    firstName:
                      null !== (o = n.firstName) && void 0 !== o ? o : "",
                    lastName:
                      null !== (a = n.lastName) && void 0 !== a ? a : "",
                    privacyStatus: n.profilePrivacyStatus,
                  },
                  name: n.memberName,
                  email: n.loginEmail,
                  id: n.id,
                  owner: n.owner,
                  status: n.status,
                };
              };
            return {
              currentMember: t,
              smCurrentMember: t,
              logOutCurrentMember: (0, Ge.u)(["site"], (t, i) => {
                e.logout(null == i ? void 0 : i.url);
              }),
              requestLogin: (0, Ge.u)(["site"], i),
              smRequestLogin: (0, Ge.u)(["site"], i),
            };
          },
        })),
        xe = (0, o.ff)(
          [I.n9, (0, o.t6)(a.$e, I.u2), r.xP],
          (e, { componentIds: t }, i) => ({
            name: "site-members-components",
            pageWillMount() {
              const o = t.reduce((t, i) => {
                const o = e.getSocialAuthComponentProps();
                return Object.assign(Object.assign({}, t), { [i]: o });
              }, {});
              i.update(o);
            },
          })
        ),
        $e = (0, o.ff)([(0, o.t6)(a.Wf, I.u2)], (e) => ({
          handle: async (t) => {
            const {
              shouldShowRenderingBlockingDialogs: i,
              showRenderingBlockingDialogs: o,
            } = e.get();
            return i() ? (o(), null) : t;
          },
        })),
        We = (e) => {
          e(I.n9, Be.j.AppWillMountHandler, Be.j.AppDidMountHandler).to(Ve),
            e(S.BD.BlockingDialogs).to($e);
        },
        qe = (e) => {
          e(Fe.go).to(je),
            e(Be.j.PageWillMountHandler).to(xe),
            e(Be.j.PageWillUnmountHandler).to(
              (0, o.ff)([I.n9], (e) => ({
                pageWillUnmount(t) {
                  return e.pageWillUnmount(t);
                },
              }))
            );
        };
    },
  },
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.3ac1af80.chunk.min.js.map
